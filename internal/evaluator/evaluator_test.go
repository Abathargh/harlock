package evaluator

import (
	"bufio"
	"bytes"
	"crypto/md5"
	"crypto/sha1"
	"crypto/sha256"
	"fmt"
	"math/rand"
	"os"
	"strconv"
	"strings"
	"testing"
	"time"

	"github.com/Abathargh/harlock/internal/lexer"
	"github.com/Abathargh/harlock/internal/object"
	"github.com/Abathargh/harlock/internal/parser"
)

func TestEvalIntegerExpression(t *testing.T) {
	tests := []struct {
		input         string
		expectedValue int64
	}{
		{"15", 15},
		{"23", 23},
		{"-5", -5},
		{"--5", 5},
		{"-10", -10},
		{"~3", 252},
		{"1 | 2", 3},
		{"1 & 2", 0},
		{"(2 + 2) * 3", 12},
		{"2 + 2 * 3", 8},
		{"4 / 2", 2},
		{"(1 << 2) / 2 ", 2},
		{"(2 >> 1) * 2 / 2", 1},
		{"1 ^ 1", 0},
		{"2 * (8 % 3)", 4},
	}

	for _, testCase := range tests {
		evaluatedObj := testEval(testCase.input)
		testIntegerObject(t, testCase.input, evaluatedObj, testCase.expectedValue)
	}
}

func TestEvalBooleanExpression(t *testing.T) {
	tests := []struct {
		input         string
		expectedValue bool
	}{
		{"true", true},
		{"false", false},
		{"1 < 2", true},
		{"3 < 2", false},
		{"2 > 1", true},
		{"0 > 1", false},
		{"1 <= 2", true},
		{"2 <= 2", true},
		{"5 <= 4", false},
		{"3 >= 2", true},
		{"2 >= 2", true},
		{"3 >= 4", false},
		{"2 > 1", true},
		{"0 > 1", false},
		{"5 == 5", true},
		{"4 == 5", false},
		{"4 != 5", true},
		{"5 != 5", false},
		{"true == true", true},
		{"true == false", false},
		{"false == true", false},
		{"false == false", true},
		{"true != true", false},
		{"true != false", true},
		{"false != true", true},
		{"false != false", false},
		{"(5 > 4) != false", true},
		{"(5 > 4) == false", false},
		{"true && true", true},
		{"true && false", false},
		{"false && true", false},
		{"false && false", false},
		{"true || true", true},
		{"true || false", true},
		{"false || true", true},
		{"false || false", false},
	}

	for _, testCase := range tests {
		evaluatedObj := testEval(testCase.input)
		testBooleanObject(t, evaluatedObj, testCase.expectedValue)
	}
}

func TestUnaryNotOperator(t *testing.T) {
	tests := []struct {
		input    string
		expected bool
	}{
		{"!true", false},
		{"!false", true},
		{"!!true", true},
		{"!!false", false},
		{"!5", false},
	}

	for _, testCase := range tests {
		evaluatedNotExpression := testEval(testCase.input)
		testBooleanObject(t, evaluatedNotExpression, testCase.expected)
	}
}

func TestIfElseExpression(t *testing.T) {
	tests := []struct {
		input    string
		expected any
	}{
		{"if true { 1 }", 1},
		{"if false { 1 }", nil},
		{"if 12 { 2 }", 2},
		{"if 2 < 3 { 3 }", 3},
		{"if 2 > 3 { b }", nil},
		{"if true && true { 4 }", 4},
		{"if false || false { b }", nil},
		{"if false || false { b } else { 12 }", 12},
		{"if true && false { b } else { 24 }", 24},
	}

	for _, testCase := range tests {
		evaluatedIfExpression := testEval(testCase.input)
		expectedInt, ok := testCase.expected.(int)
		if ok {
			testIntegerObject(t, testCase.input, evaluatedIfExpression, int64(expectedInt))
		} else {
			testNullObject(t, evaluatedIfExpression)
		}
	}
}

func TestReturnStatement(t *testing.T) {
	tests := []struct {
		input               string
		expectedReturnValue int64
	}{
		{"ret 10\n", 10},
		{"ret 5 * 5\n", 25},
		{"ret (4+3)*2\n", 14},
		{"ret 2\na\n", 2},
		{`
if 10 > 1 {
	if 10 > 1 {
		ret 10
	}
	ret 1
}
`, 10},
	}

	for _, testCase := range tests {
		evaluatedReturn := testEval(testCase.input)
		testIntegerObject(t, testCase.input, evaluatedReturn, testCase.expectedReturnValue)
	}
}

func TestErrorHandling(t *testing.T) {
	tests := []struct {
		input            string
		expectedErrorMsg string
	}{
		{"false + true", "unknown operator Bool + Bool on line 1"},
		{"false + 12", "type mismatch: Bool + Int on line 1"},
		{"-true", "unsupported operand 'Bool' for unary minus on line 1"},
		{"~false", "unsupported operand 'Bool' for bitwise not on line 1"},
		{"if 2 < 3 { ret 12 + true }", "type mismatch: Int + Bool on line 1"},
		{`"string" + 12`, "type mismatch: String + Int on line 1"},
		{`"string" + true`, "type mismatch: String + Bool on line 1"},
		{`"string" - "string2"`, "unsupported operator String - String on line 1"},
	}

	for _, testCase := range tests {
		evaluatedError := testEval(testCase.input)
		errorObj, ok := evaluatedError.(*object.Error)
		if !ok {
			t.Errorf("expected Error type, got %T (%+v)", evaluatedError, testCase.input)
			continue
		}

		if errorObj.Message != testCase.expectedErrorMsg {
			t.Errorf("expected %s error, got %s", testCase.expectedErrorMsg, errorObj.Message)
		}
	}
}

func TestVarStatement(t *testing.T) {
	tests := []struct {
		input         string
		expectedValue int64
	}{
		{"var a = 5\na", 5},
		{"var a = (5 * 2) % 4\na", 2},
		{"var a = 4 % 4\nvar b = a\n b", 0},
		{"var a = 4\nvar b = a + 2\nvar c = b\nc", 6},
	}

	for _, testCase := range tests {
		testIntegerObject(t, testCase.input, testEval(testCase.input), testCase.expectedValue)
	}
}

func TestFunctionLiterals(t *testing.T) {
	input := "fun(a) { a * a }\n"
	expectedFunBody := "(a*a)"

	obj := testEval(input)
	functionObject, ok := obj.(*object.Function)
	if !ok {
		t.Fatalf("expected object of Function type, got %T", obj)
	}

	if len(functionObject.Parameters) != 1 {
		t.Fatalf("expected 1 parameters, got %d", len(functionObject.Parameters))
	}

	if functionObject.Parameters[0].String() != "a" {
		t.Fatalf("expected a parameter with name \"a\", got %s", functionObject.Parameters[0].String())
	}

	if functionObject.Body.String() != expectedFunBody {
		t.Errorf("expected function body = %q, got %q", expectedFunBody, functionObject.Body.String())
	}
}

func TestFunction(t *testing.T) {
	tests := []struct {
		input          string
		expectedOutput int64
	}{
		{"var a = fun(x) { x }\na(20)\n", 20},
		{"var mul = fun(x, y) { ret x * y }\nmul(2, 3)\n", 6},
		{"var double = fun(x) { ret x << 2 }\ndouble(5)\n", 20},
		{"fun(x) { ret x & 1 }(15)\n", 1},
		{"fun(x) { print(x)\n ret x & 1 }(15)\n", 1},
		{"var mod = fun(x, y) { ret x % y }\n mod(mod(6, 5), 3)", 1},
	}

	for _, testCase := range tests {
		testIntegerObject(t, testCase.input, testEval(testCase.input), testCase.expectedOutput)
	}
}

func TestStringOperators(t *testing.T) {
	tests := []struct {
		input          string
		expectedOutput any
	}{
		{`'single ' + 'single'`, "single single"},
		{`'single ' + "double"`, "single double"},
		{`"double " + 'single'`, "double single"},
		{`"double " + "double"`, "double double"},
		{`"single" == "single"`, true},
		{`"single" == "double"`, false},
		{`"single" != "single"`, false},
		{`"single" != "double"`, true},
		{`'single' == 'single'`, true},
		{`'single' == 'double'`, false},
		{`'single' != 'single'`, false},
		{`'single' != 'double'`, true},
	}

	for _, testCase := range tests {
		evalString := testEval(testCase.input)
		switch result := evalString.(type) {
		case *object.String:
			if result.Value != testCase.expectedOutput {
				t.Errorf("expected %s, got %s", testCase.expectedOutput, result.Value)
			}
		case *object.Boolean:
			if result.Value != testCase.expectedOutput {
				t.Errorf("expected %t, got %t", testCase.expectedOutput, result.Value)
			}
		default:
			t.Errorf("expected expression of type String or Boolean, got %T", result)
		}

	}
}

func TestStringLiteral(t *testing.T) {
	tests := []struct {
		input          string
		expectedOutput string
	}{
		{`'test single quotes'`, "test single quotes"},
		{`"test double quotes"`, "test double quotes"},
	}

	for _, testCase := range tests {
		evalString := testEval(testCase.input)
		stringObj, ok := evalString.(*object.String)
		if !ok {
			t.Fatalf("expected String type, got %T", evalString)
		}

		if stringObj.Value != testCase.expectedOutput {
			t.Errorf("expected %s, got %s", testCase.expectedOutput, stringObj.Value)
		}
	}
}

func TestBuiltinFunctions(t *testing.T) {
	tests := []struct {
		input    string
		expected any
	}{
		{`int("1234")`, 1234},
		{`int("0x12")`, 0x12},
		{`int("0X12")`, 0x12},
		{`int("1", "2")`, object.ErrorObj},
		{`int(1)`, object.ErrorObj},
		{`int([1, 2])`, object.ErrorObj},
		{`int("test")`, object.RuntimeErrorObj},
		{`hex(255)`, "0xff"},
		{`hex()`, object.ErrorObj},
		{`hex([0x01, 0x04, 0xfa, 0xcb])`, "0104facb"},
		{`hex([0x01, 0x04, 0xfa, 1000])`, object.RuntimeErrorObj},
		{`hex("error")`, object.ErrorObj},
		{`from_hex("ffab21")`, object.ArrayObj},
		{`from_hex(0)`, object.ErrorObj},
		{`len("")`, 0},
		{`len("ciao")`, 4},
		{`len([1, 2, 3])`, 3},
		{`len({1: 3, 6: 12, "ciao": "test"})`, 3},
		{`len(set(1, 4, 7, 11))`, 4},
		{`len(0)`, object.ErrorObj},
		{`set("ciao", 1, 2, 3)`, object.SetObj},
		{`set(set(1))`, object.RuntimeErrorObj},
		{`type("ciao")`, object.StringObj},
		{`type(1)`, object.StringObj},
		{`type(1/0)`, object.ErrorObj},
		{`type("ciao")`, object.StringObj},
		{`type([])`, object.StringObj},
		{`type({})`, object.StringObj},
		{`type(type([]))`, object.StringObj},
		{`type(a)`, object.ErrorObj},
		{`type()`, object.ErrorObj},
		{`print("ciao")`, nil},
		{`print(a)`, object.ErrorObj},
		{`contains([1, 2, 3], 1)`, true},
		{`contains([1, 2, 3], 4)`, false},
		{`contains({1: 2, 3: 4}, 3)`, true},
		{`contains({1: 2, 3: 4}, 5)`, false},
		{`contains(set(5, 8, 22), 22)`, true},
		{`contains(set(5, 8, 22), 42)`, false},
		{`contains(0, 42)`, object.ErrorObj},
		{`error("test ok")`, object.RuntimeErrorObj},
		{`error("test ok", 1)`, object.RuntimeErrorObj},
		{`error("test ok", 1, 2)`, object.RuntimeErrorObj},
		{`error("test ok", 1, [1, 2])`, object.RuntimeErrorObj},
		{`error("test ok", 1, [1, 2], set(1, 2, 3))`, object.RuntimeErrorObj},
	}

	for _, testCase := range tests {
		evalBuiltin := testEval(testCase.input)
		switch expected := testCase.expected.(type) {
		case int:
			testIntegerObject(t, testCase.input, evalBuiltin, int64(expected))
		case bool:
			testBooleanObject(t, evalBuiltin, expected)
		case string:
			testStringObject(t, evalBuiltin, expected)
		case object.ObjectType:
			if evalBuiltin.Type() != expected {
				t.Errorf("%s: expected object of type %s, got %s", testCase.input, expected, evalBuiltin.Type())
			}
		case nil:
			if evalBuiltin != nil {
				t.Errorf("%s: expected nil, got %s", testCase.input, evalBuiltin.Type())
			}
		default:
			t.Errorf("%s: expected object of type %s, got %q", testCase.input, expected, evalBuiltin)
		}
	}
}

func TestHashBuiltinFunction(t *testing.T) {
	const arraySize = 30
	const testSize = 100

	testAlgos := []string{"sha1", "sha256", "md5"}

	randSource := rand.NewSource(time.Now().UnixNano())
	randGen := rand.New(randSource)
	testArray := make([]byte, arraySize)
	strArray := make([]string, arraySize)

	for i := 0; i < testSize; i++ {
		for j := 0; j < arraySize; j++ {
			r := randGen.Intn(256)
			testArray[j] = byte(r)
			strArray[j] = strconv.Itoa(r)
		}

		strRepr := fmt.Sprintf("[%s]", strings.Join(strArray, ", "))

		for _, alg := range testAlgos {

			var result []byte
			switch alg {
			case "sha1":
				resultSha1 := sha1.Sum(testArray)
				result = resultSha1[:]
			case "sha256":
				resultSha256 := sha256.Sum256(testArray)
				result = resultSha256[:]
			case "md5":
				resultMd5 := md5.Sum(testArray)
				result = resultMd5[:]
			}

			prog := fmt.Sprintf("hash(%s, \"%s\")\n", strRepr, alg)
			res, isByteArray := testEval(prog).(*object.Array)
			if !isByteArray {
				t.Errorf("expected byte array, got %s (%v)", res.Type(), prog)
				return
			}

			byteResult := make([]byte, len(res.Elements))
			err := intArrayToBytes(res, byteResult)
			if err != nil {
				t.Errorf("expected byte array, got %s", res.Type())
			}

			if !bytes.Equal(result, byteResult) {
				t.Errorf("Got a discrepancy in calulating '%s' hash", alg)
			}
		}
	}
}

func TestArrayLiterals(t *testing.T) {
	input := `[5, 5 % 4, 6 & 2]`

	arrayObj := testEval(input)
	arrayLiteral, ok := arrayObj.(*object.Array)
	if !ok {
		t.Fatalf("expected object of Array type, got %T", arrayObj)
	}

	if len(arrayLiteral.Elements) != 3 {
		t.Fatalf("expected 3 elements, got %d", len(arrayLiteral.Elements))
	}

	testIntegerObject(t, input, arrayLiteral.Elements[0], 5)
	testIntegerObject(t, input, arrayLiteral.Elements[1], 1)
	testIntegerObject(t, input, arrayLiteral.Elements[2], 2)
}

func TestArrayIndexExpressions(t *testing.T) {
	tests := []struct {
		input    string
		expected any
	}{
		{"[1][0]", 1},
		{"[\"ciao\"][0]", object.StringObj},
		{"[1, 2, 4][1 + 1]", 4},
		{"[1, 2, \"test\"][1 + 1]", object.StringObj},
		{"[0xfe, \"ciao\", 12][2]", 12},
		{"var arr = [2, 5, 1]\narr[1]", 5},
		{"var add = fun(x,y){ ret x+y }\n[2, add(3, 4), 3][1]", 7},
		{"[1][-1]", object.ErrorObj},
		{"[1][2]", object.ErrorObj},
		{"var arr = [2, 5, 1]\narr[-1]", object.ErrorObj},
		{"var arr = [2, 5, 1]\narr[10]", object.ErrorObj},
	}

	for _, testCase := range tests {
		arrayIndexExpr := testEval(testCase.input)

		switch expected := testCase.expected.(type) {
		case object.ObjectType:
			if arrayIndexExpr.Type() != expected {
				t.Errorf("expected object of type %s, got %s", expected, arrayIndexExpr.Type())
			}
		case int:
			testIntegerObject(t, testCase.input, arrayIndexExpr, int64(expected))
		}
	}
}

func TestFailingFileBuiltins(t *testing.T) {
	hexFile := `:020000021000EC
:10C20000E0A5E6F6FDFFE0AEE00FE6FCFDFFE6FD93
:10C21000FFFFF6F50EFE4B66F2FA0CFEF2F40EFE90
:10C22000F04EF05FF06CF07DCA0050C2F086F097DF
:10C23000F04AF054BCF5204830592D02E018BB03F9
:020000022000DC
:04000000FA00000200
:00000001FF
`

	bytesFile := []byte{0x01, 0x02, 0x03}

	if err := os.WriteFile("test.hex", []byte(hexFile), 0666); err != nil {
		t.Fatalf("cannot create the test.hex file")
	}
	defer func() { _ = os.Remove("test.hex") }()

	if err := os.WriteFile("test-bytes-file", bytesFile, 0666); err != nil {
		t.Fatalf("cannot create the test-bytes-file file")
	}
	defer func() { _ = os.Remove("test-bytes-file") }()

	testCases := []struct {
		input    string
		expected object.ObjectType
	}{
		{"open()", object.ErrorObj},
		{"open(\"hex\")", object.ErrorObj},
		{"open(\"hex\", 1, 2)", object.ErrorObj},
		{"open(\"test.hex\", \"random\")", object.RuntimeErrorObj},
		{"open(\"fake.hex\", \"hex\")", object.RuntimeErrorObj},
		{"open(\"fake.elf\", \"elf\")", object.RuntimeErrorObj},
		{"open(\"test.hex\", \"elf\")", object.RuntimeErrorObj},
		{"open(\"fake\", \"bytes\")", object.RuntimeErrorObj},
		{"open(\"test-bytes-file\", \"hex\")", object.RuntimeErrorObj},
		{"open(\"test-bytes-file\", \"elf\")", object.RuntimeErrorObj},

		{"save()", object.ErrorObj},
		{"save(1)", object.ErrorObj},
		{"save(\"test\")", object.ErrorObj},
		{"save(1, 2)", object.ErrorObj},
		{"save(open(\"fake\", \"bytes\"))", object.ErrorObj},

		{"as_bytes()", object.ErrorObj},
		{"as_bytes(1)", object.ErrorObj},
		{"as_bytes(1, 2)", object.ErrorObj},
		{"as_bytes(\"test\")", object.ErrorObj},
		{"as_bytes(open(\"fake\", \"bytes\"))", object.ErrorObj},
	}

	for _, testCase := range testCases {
		fileExpr := testEval(testCase.input)
		if fileExpr.Type() != testCase.expected {
			t.Errorf("%s: expected error of type %s, got %s", testCase.input, testCase.expected, fileExpr.Type())
		}
	}
}

func TestHexFile(t *testing.T) {
	hexFile := `:020000021000EC
:10C20000E0A5E6F6FDFFE0AEE00FE6FCFDFFE6FD93
:10C21000FFFFF6F50EFE4B66F2FA0CFEF2F40EFE90
:10C22000F04EF05FF06CF07DCA0050C2F086F097DF
:10C23000F04AF054BCF5204830592D02E018BB03F9
:020000022000DC
:04000000FA00000200
:00000001FF
`

	input := `open("test.hex", "hex")`

	err := os.WriteFile("test.hex", []byte(hexFile), 0666)
	if err != nil {
		t.Fatalf("cannot create the test.hex file")
	}
	defer func() { _ = os.Remove("test.hex") }()

	evaluated := testEval(input)
	hex, ok := evaluated.(*object.HexFile)
	if !ok {
		t.Fatalf("expected object of HexFile type, got %T: %v", evaluated, evaluated)
	}

	if hex.Name() != "test.hex" {
		t.Fatalf("expected file to have \"test.hex\" as its name, got %q", hex.Name())
	}

	if hex.File.Size() != 8 {
		t.Fatalf("expected file to have 8 records, got %d", hex.File.Size())
	}

	rows := strings.Split(hexFile, "\n")
	for idx, recordString := range rows[:len(rows)-1] {
		currentRecord, _ := hex.File.Record(idx)
		currentStrRecord := currentRecord.AsString()
		if currentStrRecord != recordString {
			t.Errorf("expected record[%d] = %q, gt %q",
				idx, recordString, currentStrRecord)
		}
	}
}

func TestElfFile(t *testing.T) {
	input := `open("test.elf", "elf")`

	err := os.WriteFile("test.elf", elfFile, 0666)
	if err != nil {
		t.Fatalf("cannot create the test.elf file")
	}
	defer func() { _ = os.Remove("test.elf") }()

	evaluated := testEval(input)
	elf, ok := evaluated.(*object.ElfFile)
	if !ok {
		t.Fatalf("expected object of ElfFile type, got %T: %v", evaluated, evaluated)
	}

	if elf.Name() != "test.elf" {
		t.Fatalf("expected file to have \"test.elf\" as its name, got %q", elf.Name())
	}
}

func TestBytesFile(t *testing.T) {
	bytesFile := [32]byte{}

	input := `open("test.bin", "bytes")`

	err := os.WriteFile("test.bin", bytesFile[:], 0666)
	if err != nil {
		t.Fatalf("cannot create the test.bin file")
	}
	defer func() { _ = os.Remove("test.bin") }()

	evaluated := testEval(input)
	elf, ok := evaluated.(*object.BytesFile)
	if !ok {
		t.Fatalf("expected object of BytesFile type, got %T: %v", evaluated, evaluated)
	}

	if elf.Name() != "test.bin" {
		t.Fatalf("expected file to have \"test.bin\" as its name, got %q", elf.Name())
	}
}

func TestMapLiterals(t *testing.T) {
	input := `var test = 22
{
	"test1": 20 * 2,
	"test2": 2 & 3,
	"tes"+"t3": 4,
	test: 22,	
	true: 1,
	false: 0,
}`
	expected := map[object.HashKey]int64{
		(&object.String{Value: "test1"}).HashKey(): 40,
		(&object.String{Value: "test2"}).HashKey(): 2,
		(&object.String{Value: "test3"}).HashKey(): 4,
		(&object.Integer{Value: 22}).HashKey():     22,
		TRUE.HashKey():                             1,
		FALSE.HashKey():                            0,
	}

	evaluated := testEval(input)
	mapObj, ok := evaluated.(*object.Map)
	if !ok {
		t.Fatalf("expected object of Map type, got %T", evaluated)
	}

	if len(mapObj.Mappings) != len(expected) {
		t.Fatalf("expected %d elements, got %d", len(expected), len(mapObj.Mappings))
	}

	for expKey, expVal := range expected {
		mapping, ok := mapObj.Mappings[expKey]
		if !ok {
			t.Errorf("expected key %+v to be present in the map", expKey)
		}
		testIntegerObject(t, input, mapping.Value, expVal)
	}
}

func TestMapIndexExpressions(t *testing.T) {
	tests := []struct {
		input    string
		expected any
	}{
		{`{"test": 2}["test"]`, 2},
		{`{10: 3}[10]`, 3},
		{`{true: 4}[true]`, 4},
		{`{true: "test"}[true]`, object.StringObj},
		{`{true: "test"}["no_key"]`, object.RuntimeErrorObj},
	}

	for _, testCase := range tests {
		arrayIndexExpr := testEval(testCase.input)
		switch expected := testCase.expected.(type) {
		case object.ObjectType:
			if arrayIndexExpr.Type() != expected {
				t.Errorf("expected object of type %s, got %s", expected, arrayIndexExpr.Type())
			}
		case int:
			testIntegerObject(t, testCase.input, arrayIndexExpr, int64(expected))

		}
	}
}

func TestArrayBuiltinMethods(t *testing.T) {
	tests := []struct {
		input    string
		expected any
	}{
		{`[1, 2].push(3)`, []int64{1, 2, 3}},
		{`[1, 2].push(33)`, []int64{1, 2, 33}},
		{`[1, 2].push()`, object.ErrorObj},
		{`[1, 2].push(1, 2)`, object.ErrorObj},
		{`[1, 2].pop()`, []int64{1}},
		{`[1, 2].pop(1)`, object.ErrorObj},
		{`[1, 2, 3, 4].slice(1, 3)`, []int64{2, 3}},
		{`[1, 2, 3, 4].slice(-1, 3)`, object.ErrorObj},
		{`[1, 2, 3, 4].slice(0, 20)`, object.ErrorObj},
		{`[1, 2, 3, 4].slice(0)`, object.ErrorObj},
		{`[1, 2, 3, 4].slice(0, 1, 2)`, object.ErrorObj},
		{`[1, 2, 3, 4].slice(0, "")`, object.ErrorObj},
		{`[1, 2, 3, 4].slice("", "")`, object.ErrorObj},
		{`[1, 2, 3].map(fun(e) { ret e * 2 })`, []int64{2, 4, 6}},
		{`[1, 2, 3, 255, 254].map(hex)`, []string{"0x01", "0x02", "0x03", "0xff", "0xfe"}},
		{`[1, 2, 3, 255, 254].map()`, object.ErrorObj},
		{`[1, 2, 3, 255, 254].map(12)`, object.ErrorObj},
		{`[1, 2, 3, 255, 254].map(hex, 12)`, object.ErrorObj},
		{`[[10, 5, 7].reduce(fun(x, y) { ret x+y })]`, []int64{22}},
		{"var x = 2\n[[10, 5, 7].reduce(fun(x, y) { ret x+y }, x)]", []int64{24}},
		{"var x = 2\n[[10, 5, 7].reduce()]", object.ErrorObj},
	}

	for _, testCase := range tests {
		evalArrayBuiltin := testEval(testCase.input)
		switch expected := testCase.expected.(type) {
		case []int64:
			if !testArrayObject(t, testCase.input, evalArrayBuiltin, expected) {
				fmt.Printf("input: %s", testCase.input)
			}
		case []string:
			testStringArrayObject(t, evalArrayBuiltin, expected)
		case object.ObjectType:
			testError(t, testCase.input, expected, evalArrayBuiltin)
		}
	}
}

func TestMapBuiltinMethods(t *testing.T) {
	tests := []struct {
		input    string
		expected [][]int64
	}{
		{"var m = {1: 2}\nm.set(3, 4)\nm", [][]int64{{1, 2}, {3, 4}}},
		{"var m = {1: 2}\nm.set(3, 4)\nm", [][]int64{{1, 2}, {3, 4}}},
		{"var m  = {1: 2, 3: 4}\nm.pop(3)\nm", [][]int64{{1, 2}}},
	}

	for _, testCase := range tests {
		evalMapBuiltin := testEval(testCase.input)
		testMapObject(t, testCase.input, evalMapBuiltin, testCase.expected)
	}
}

func TestMapBuiltinMethodsFailure(t *testing.T) {
	tests := []struct {
		input    string
		expected object.ObjectType
	}{
		{"var m = {1: 2}\nm.set()", object.ErrorObj},
		{"var m = {1: 2}\nm.set(3)", object.ErrorObj},
		{"var m = {1: 2}\nm.set(3, 4, 5)", object.ErrorObj},
		{"var m = {1: 2}\nm.set([1, 2], 5)", object.RuntimeErrorObj},
		{"var m  = {1: 2, 3: 4}\nm.pop()", object.ErrorObj},
		{"var m  = {1: 2, 3: 4}\nm.pop(3, 2)", object.ErrorObj},
		{"var m  = {1: 2, 3: 4}\nm.pop([1,2])", object.RuntimeErrorObj},
	}

	for _, testCase := range tests {
		evalMapBuiltin := testEval(testCase.input)
		testError(t, testCase.input, testCase.expected, evalMapBuiltin)
	}
}

func TestHexFileBuiltinMethods(t *testing.T) {
	hexFile := `:020000021000EC
:10C20000E0A5E6F6FDFFE0AEE00FE6FCFDFFE6FD93
:10C21000FFFFF6F50EFE4B66F2FA0CFEF2F40EFE90
:10C22000F04EF05FF06CF07DCA0050C2F086F097DF
:10C23000F04AF054BCF5204830592D02E018BB03F9
:020000022000DC
:04000000FA00000200
:00000001FF
`
	tests := []struct {
		input    string
		expected any
	}{
		{"open(\"test.hex\", \"hex\").record(2)", ":10C21000FFFFF6F50EFE4B66F2FA0CFEF2F40EFE90"},
		{"open(\"test.hex\", \"hex\").size()", int64(8)},
		{"open(\"test.hex\", \"hex\").binary_size()", int64(68)},
		{"open(\"test.hex\", \"hex\").read_at(0x1000*16 + 0xC200, 2)", []int64{0xE0, 0xA5}},
		{
			`var h = open("test.hex", "hex")
h.write_at(0x2000*16, from_hex("DEADBEEF"))
h.read_at(0x2000*16, 4)`, []int64{0xDE, 0xAD, 0xBE, 0xEF},
		},
	}

	err := os.WriteFile("test.hex", []byte(hexFile), 0666)
	if err != nil {
		t.Fatalf("cannot create the test.hex file")
	}
	defer func() { _ = os.Remove("test.hex") }()

	for _, testCase := range tests {
		evalHexBuiltin := testEval(testCase.input)
		switch expected := testCase.expected.(type) {
		case string:
			evalString, isString := evalHexBuiltin.(*object.String)
			if !isString {
				t.Fatalf("expected string, got %T", evalHexBuiltin)
			}

			if expected != evalString.Value {
				t.Fatalf("expected string = %q, got %q", expected, evalString.Value)
			}
		case []int64:
			evalArr, isArr := evalHexBuiltin.(*object.Array)
			if !isArr {
				t.Fatalf("expected array, got %T: %v", evalHexBuiltin, evalHexBuiltin)
			}

			for idx, elem := range evalArr.Elements {
				intElem, isInt := elem.(*object.Integer)
				if !isInt {
					t.Fatalf("expected int, got %T", elem)
				}

				if idx > len(expected) || intElem.Value != expected[idx] {
					t.Fatalf("expected %v, got %d", expected, intElem.Value)
				}
			}
		case int64:
			evalInt, isInt := evalHexBuiltin.(*object.Integer)
			if !isInt {
				t.Fatalf("expected int, got %T", evalHexBuiltin)
			}

			if expected != evalInt.Value {
				t.Fatalf("expected size = %q, got %q", expected, evalInt.Value)
			}
		}
	}
}

func TestHexFileBuiltinMethodsFailure(t *testing.T) {
	hexFile := `:020000021000EC
:10C20000E0A5E6F6FDFFE0AEE00FE6FCFDFFE6FD93
:10C21000FFFFF6F50EFE4B66F2FA0CFEF2F40EFE90
:10C22000F04EF05FF06CF07DCA0050C2F086F097DF
:10C23000F04AF054BCF5204830592D02E018BB03F9
:020000022000DC
:04000000FA00000200
:00000001FF
`

	testCases := []struct {
		input    string
		expected object.ObjectType
	}{
		{"open(\"test.hex\", \"hex\").record()", object.ErrorObj},
		{"open(\"test.hex\", \"hex\").record(\"test\")", object.ErrorObj},
		{"open(\"test.hex\", \"hex\").record(1, 2)", object.ErrorObj},
		{"open(\"test.hex\", \"hex\").record(-1)", object.RuntimeErrorObj},
		{"open(\"test.hex\", \"hex\").record(100000)", object.RuntimeErrorObj},

		{"open(\"test.hex\", \"hex\").size(1)", object.ErrorObj},
		{"open(\"test.hex\", \"hex\").binary_size(1)", object.ErrorObj},

		{"open(\"test.hex\", \"hex\").read_at()", object.ErrorObj},
		{"open(\"test.hex\", \"hex\").read_at(1, 2, 3)", object.ErrorObj},
		{"open(\"test.hex\", \"hex\").read_at(\"test\", 1)", object.ErrorObj},
		{"open(\"test.hex\", \"hex\").read_at(2, \"test\")", object.ErrorObj},
		{"open(\"test.hex\", \"hex\").read_at(\"test\", \"test\")", object.ErrorObj},
		{"open(\"test.hex\", \"hex\").read_at(-1, 1)", object.RuntimeErrorObj},
		{"open(\"test.hex\", \"hex\").read_at(0, -1)", object.RuntimeErrorObj},
		{"open(\"test.hex\", \"hex\").read_at(-1, -1)", object.RuntimeErrorObj},
		{"open(\"test.hex\", \"hex\").read_at(0, 1000000000)", object.RuntimeErrorObj},
		{"open(\"test.hex\", \"hex\").read_at(10, 1000000000)", object.RuntimeErrorObj},

		{"open(\"test.hex\", \"hex\").write_at()", object.ErrorObj},
		{"open(\"test.hex\", \"hex\").write_at(1, 2, 3)", object.ErrorObj},
		{"open(\"test.hex\", \"hex\").write_at(\"test\", 1)", object.ErrorObj},
		{"open(\"test.hex\", \"hex\").write_at(2, \"test\")", object.ErrorObj},
		{"open(\"test.hex\", \"hex\").write_at(\"test\", \"test\")", object.ErrorObj},
		{"open(\"test.hex\", \"hex\").write_at(-1, [1, 2])", object.RuntimeErrorObj},
		{"open(\"test.hex\", \"hex\").write_at(0, [-1, 2])", object.RuntimeErrorObj},
		{"open(\"test.hex\", \"hex\").write_at(-1, [1000, 2000])", object.RuntimeErrorObj},
		{"open(\"test.hex\", \"hex\").write_at(0, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])", object.RuntimeErrorObj},
		{"open(\"test.hex\", \"hex\").write_at(10, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])", object.RuntimeErrorObj},
	}

	if err := os.WriteFile("test.hex", []byte(hexFile), 0666); err != nil {
		t.Fatalf("cannot create the test.hex file")
	}
	defer func() { _ = os.Remove("test.hex") }()

	for _, testCase := range testCases {
		fileExpr := testEval(testCase.input)
		if fileExpr.Type() != testCase.expected {
			t.Errorf("%s: expected error of type %s, got %s", testCase.input, testCase.expected, fileExpr.Type())
		}
	}
}

func TestElfFileBuiltinMethods(t *testing.T) {
	tests := []struct {
		input    string
		expected any
	}{
		{
			"var e = open(\"test.elf\", \"elf\")\ne.has_section(\".metadata\")",
			true,
		},
		{
			"var e = open(\"test.elf\", \"elf\")\ne.sections()",
			[]string{
				"", ".data", ".metadata", ".text", ".comment", ".note.gnu.avr.deviceinfo",
				".debug_aranges", ".debug_info", ".debug_abbrev", ".debug_line", ".debug_str",
				".debug_line_str", ".symtab", ".strtab", ".shstrtab",
			},
		},
		{
			"var e = open(\"test.elf\", \"elf\")\ne.section_address(\".metadata\")",
			int64(0x800100),
		},
		{
			"var e = open(\"test.elf\", \"elf\")\ne.section_size(\".metadata\")",
			int64(64),
		},
		{
			"var e = open(\"test.elf\", \"elf\")\ne.read_section(\".metadata\")",
			[]int64{
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			},
		},
		{
			"var e = open(\"test.elf\", \"elf\")\ne.write_section(\".metadata\", [1, 2, 3], 0)\ne.read_section(\".metadata\")",
			[]int64{
				1, 2, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			},
		},
		{
			"var e = open(\"test.elf\", \"elf\")\ne.write_section(\".metadata\", [1, 2, 3], 5)\ne.read_section(\".metadata\")",
			[]int64{
				0, 0, 0, 0, 0, 1, 2, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			},
		},
	}

	err := os.WriteFile("test.elf", elfFile, 0666)
	if err != nil {
		t.Fatalf("cannot create the test.elf file")
	}
	defer func() { _ = os.Remove("test.elf") }()

	for _, testCase := range tests {
		evalElfBuiltin := testEval(testCase.input)
		switch expected := testCase.expected.(type) {
		case bool:
			evalBool, isBool := evalElfBuiltin.(*object.Boolean)
			if !isBool {
				t.Fatalf("expected bool, got %T", evalElfBuiltin)
			}

			if expected != evalBool.Value {
				t.Fatalf("expected bool = %t, got %t", expected, evalBool.Value)
			}
		case []int64:
			evalArr, isArr := evalElfBuiltin.(*object.Array)
			if !isArr {
				t.Fatalf("expected array, got %T: %v", evalElfBuiltin, evalElfBuiltin)
			}

			for idx, elem := range evalArr.Elements {
				intElem, isInt := elem.(*object.Integer)
				if !isInt {
					t.Fatalf("expected int, got %T", elem)
				}

				if idx > len(expected) || intElem.Value != expected[idx] {
					t.Fatalf("expected %v, got %d", expected, intElem.Value)
				}
			}
		case int64:
			evalInt, isInt := evalElfBuiltin.(*object.Integer)
			if !isInt {
				t.Fatalf("expected int, got %T", evalElfBuiltin)
			}

			if expected != evalInt.Value {
				t.Fatalf("expected value = %d, got %d", expected, evalInt.Value)
			}
		case []string:
			evalArr, isArr := evalElfBuiltin.(*object.Array)
			if !isArr {
				t.Fatalf("expected array, got %T: %v", evalElfBuiltin, evalElfBuiltin)
			}

			for idx, elem := range evalArr.Elements {
				strElem, isString := elem.(*object.String)
				if !isString {
					t.Fatalf("expected String, got %T", elem)
				}

				if idx > len(expected) || strElem.Value != expected[idx] {
					t.Fatalf("expected %v, got %s", expected, strElem.Value)
				}
			}
		}
	}
}

func TestElfFileBuiltinMethodsFailure(t *testing.T) {
	testCases := []struct {
		input    string
		expected object.ObjectType
	}{
		{"open(\"test.elf\", \"elf\").has_section()", object.ErrorObj},
		{"open(\"test.elf\", \"elf\").has_section(1)", object.ErrorObj},
		{"open(\"test.elf\", \"elf\").has_section(1, 2)", object.ErrorObj},

		{"open(\"test.elf\", \"elf\").sections(1)", object.ErrorObj},

		{"open(\"test.elf\", \"elf\").section_address()", object.ErrorObj},
		{"open(\"test.elf\", \"elf\").section_address(1)", object.ErrorObj},
		{"open(\"test.elf\", \"elf\").section_address(\"test\", 1)", object.ErrorObj},
		{"open(\"test.elf\", \"elf\").section_address(\"test-not-exist\")", object.RuntimeErrorObj},

		{"open(\"test.elf\", \"elf\").section_size()", object.ErrorObj},
		{"open(\"test.elf\", \"elf\").section_size(1)", object.ErrorObj},
		{"open(\"test.elf\", \"elf\").section_size(\"test\", 1)", object.ErrorObj},
		{"open(\"test.elf\", \"elf\").section_size(\"test-not-exist\")", object.RuntimeErrorObj},

		{"open(\"test.elf\", \"elf\").read_section()", object.ErrorObj},
		{"open(\"test.elf\", \"elf\").read_section(1)", object.ErrorObj},
		{"open(\"test.elf\", \"elf\").read_section(\"test-not-exist\", 1)", object.ErrorObj},
		{"open(\"test.elf\", \"elf\").read_section(1, 2, 3)", object.ErrorObj},
		{"open(\"test.elf\", \"elf\").read_section(1, 2, 3)", object.ErrorObj},
		{"open(\"test.elf\", \"elf\").read_section(\"test-not-exist\")", object.RuntimeErrorObj},

		{"open(\"test.elf\", \"elf\").write_section()", object.ErrorObj},
		{"open(\"test.elf\", \"elf\").write_section(1)", object.ErrorObj},
		{"open(\"test.elf\", \"elf\").write_section(\"test-not-exist\", 1)", object.ErrorObj},
		{"open(\"test.elf\", \"elf\").write_section(1, 2, 3)", object.ErrorObj},
		{"open(\"test.elf\", \"elf\").write_section(1, 2, 3, 4)", object.ErrorObj},
		{"open(\"test.elf\", \"elf\").write_section(\"test-not-exist\", [1, 2], -1)", object.RuntimeErrorObj},
		{"open(\"test.elf\", \"elf\").write_section(\"test-not-exist\", [1000, 2], 0)", object.RuntimeErrorObj},
		{"open(\"test.elf\", \"elf\").write_section(\"test-not-exist\", [1, 2, 3], 0)", object.RuntimeErrorObj},
		{"open(\"test.elf\", \"elf\").write_section(\".metadata\", [1, 2, 3], 100000000000)", object.RuntimeErrorObj},
	}

	if err := os.WriteFile("test.elf", elfFile, 0666); err != nil {
		t.Fatalf("cannot create the test.elf file")
	}
	defer func() { _ = os.Remove("test.elf") }()

	for _, testCase := range testCases {
		fileExpr := testEval(testCase.input)
		if fileExpr.Type() != testCase.expected {
			t.Errorf("%s: expected error of type %s, got %s", testCase.input, testCase.expected, fileExpr.Type())
		}
	}
}

func TestBytesFileBuiltinMethods(t *testing.T) {
	tests := []struct {
		input    string
		expected []int64
	}{
		{"var b = open(\"test.bin\", \"bytes\")\nb.read_at(0, 5)", []int64{0, 0, 0, 0, 0}},
		{"var b = open(\"test.bin\", \"bytes\")\nb.write_at(0, [1, 2, 3])\nb.read_at(0, 5)", []int64{1, 2, 3, 0, 0}},
		{"var b = open(\"test.bin\", \"bytes\")\nb.write_at(5, [1, 2, 3])\nb.read_at(5, 5)", []int64{1, 2, 3, 0, 0}},
	}

	bytesFile := [32]byte{}

	err := os.WriteFile("test.bin", bytesFile[:], 0666)
	if err != nil {
		t.Fatalf("cannot create the test.bin file")
	}
	defer func() { _ = os.Remove("test.bin") }()

	for _, testCase := range tests {
		evalElfBuiltin := testEval(testCase.input)
		evalArr, isArr := evalElfBuiltin.(*object.Array)
		if !isArr {
			t.Fatalf("expected array, got %T: %v", evalElfBuiltin, evalElfBuiltin)
		}

		for idx, elem := range evalArr.Elements {
			intElem, isInt := elem.(*object.Integer)
			if !isInt {
				t.Fatalf("expected int, got %T", elem)
			}

			if idx > len(testCase.expected) || intElem.Value != testCase.expected[idx] {
				t.Fatalf("expected %v, got %d", testCase.expected, intElem.Value)
			}
		}
	}
}

func TestFailingBytesMethodBuiltins(t *testing.T) {
	testCases := []struct {
		input    string
		expected object.ObjectType
	}{
		{"open(\"test.bin\", \"bytes\").read_at()", object.ErrorObj},
		{"open(\"test.bin\", \"bytes\").read_at(\"test\", \"err\")", object.ErrorObj},
		{"open(\"test.bin\", \"bytes\").read_at(1, 2, 3)", object.ErrorObj},
		{"open(\"test.bin\", \"bytes\").read_at(1, 2, 3)", object.ErrorObj},
		{"open(\"test.bin\", \"bytes\").read_at(-1, 2)", object.RuntimeErrorObj},
		{"open(\"test.bin\", \"bytes\").read_at(0, 50)", object.RuntimeErrorObj},
		{"open(\"test.bin\", \"bytes\").read_at(30, 10)", object.RuntimeErrorObj},

		{"open(\"test.bin\", \"bytes\").write_at()", object.ErrorObj},
		{"open(\"test.bin\", \"bytes\").write_at(1, 2)", object.ErrorObj},
		{"open(\"test.bin\", \"bytes\").write_at(1, \"test\")", object.ErrorObj},
		{"open(\"test.bin\", \"bytes\").write_at(1, 2, 3)", object.ErrorObj},
		{"open(\"test.bin\", \"bytes\").write_at(1, [1, 2, 3], \"test\")", object.ErrorObj},
		{"open(\"test.bin\", \"bytes\").write_at(-1, [1, 2, 3])", object.RuntimeErrorObj},
		{"open(\"test.bin\", \"bytes\").write_at(0, [2000, 1220, 3])", object.RuntimeErrorObj},
		{"open(\"test.bin\", \"bytes\").write_at(0, [-2, 1, 3])", object.RuntimeErrorObj},
		{"open(\"test.bin\", \"bytes\").write_at(0, [\"test\", 1, 3])", object.RuntimeErrorObj},
		{"open(\"test.bin\", \"bytes\").write_at(0, [0, 0, 0, 0, 0, 0, 0, 0, 0])", object.RuntimeErrorObj},
		{"open(\"test.bin\", \"bytes\").write_at(7, [0, 0, 0])", object.RuntimeErrorObj},
	}

	bytesFile := [8]byte{}

	if err := os.WriteFile("test.bin", bytesFile[:], 0666); err != nil {
		t.Fatalf("cannot create the test.bin file")
	}
	defer func() { _ = os.Remove("test.bin") }()

	for _, testCase := range testCases {
		fileExpr := testEval(testCase.input)
		if fileExpr.Type() != testCase.expected {
			t.Errorf("%s: expected error of type %s, got %s", testCase.input, testCase.expected, fileExpr.Type())
		}
	}
}

func TestArrayInfixMethods(t *testing.T) {
	tests := []struct {
		input    string
		expected any
	}{
		{"[1, 2] + [4, 10]", []int64{1, 2, 4, 10}},
		{"[4, 10] + [1, 2]", []int64{4, 10, 1, 2}},
		{"[4, 10] == [4, 10]", true},
		{"[4, 10] != [4, 10]", false},
		{"[4, 10] == [1, 2]", false},
		{"[4, 10] != [1, 2]", true},
	}

	for _, testCase := range tests {
		evalSetBuiltin := testEval(testCase.input)
		switch expected := testCase.expected.(type) {
		case []int64:
			testArrayObject(t, testCase.input, evalSetBuiltin, expected)
		case bool:
			testBooleanObject(t, evalSetBuiltin, expected)
		}
	}
}
func TestMapInfixMethods(t *testing.T) {
	tests := []struct {
		input    string
		expected bool
	}{
		{"{1: 3, 4: 10} == {1: 3, 4: 10}", true},
		{"{1: 3, 4: 10} == {4: 10, 1: 3}", true},
		{"{1: 3, 4: 10} == {4: 15, 1: 3}", false},
		{"{1: 3, 4: 10} != {2: 5, 4: 3}", true},
		{"{1: 3, 4: 10} != {4: 3, 2: 5}", true},
		{"{1: 3, 4: 10} != {1: 3, 4: 10}", false},
	}

	for _, testCase := range tests {
		evalSetBuiltin := testEval(testCase.input)
		testBooleanObject(t, evalSetBuiltin, testCase.expected)
	}
}

func TestSetInfixOperations(t *testing.T) {
	tests := []struct {
		input    string
		expected any
	}{
		{"set(1, 2) + set(2, 3)", []int64{1, 2, 3}},
		{"set(2, 3) + set(1, 2)", []int64{1, 2, 3}},
		{"set(1, 2) - set(2, 3)", []int64{1}},
		{"set(2, 3) - set(1, 2)", []int64{3}},
		{"set(1, 2, 3) ^ set(2, 6, 7)", []int64{2}},
		{"set(2, 6, 7) ^ set(1, 2, 3)", []int64{2}},
		{"set(1, 2, 3) == set(1, 2, 3)", true},
		{"set(1, 2, 3) != set(1, 2, 3)", false},
		{"set(1, 2, 3) == set(1, 2)", false},
		{"set(1, 2, 3) != set(1, 2)", true},
	}

	for _, testCase := range tests {
		evalSetBuiltin := testEval(testCase.input)
		switch expected := testCase.expected.(type) {
		case []int64:
			testSetObject(t, testCase.input, evalSetBuiltin, expected)
		case bool:
			testBooleanObject(t, evalSetBuiltin, expected)
		}
	}
}

func TestSetBuiltinMethods(t *testing.T) {
	tests := []struct {
		input    string
		expected []int64
	}{
		{"var s = set(1, 2)\ns.add(3)\ns", []int64{1, 2, 3}},
		{"var s = set(1, 2)\ns.add(2)\ns", []int64{1, 2}},
		{"var s = set(1, 2, 4, 7)}\ns.remove(7)\ns", []int64{1, 2, 4}},
		{"var s = set(1, 2, 4, 7)}\ns.remove(8)\ns", []int64{1, 2, 4, 7}},
	}

	for _, testCase := range tests {
		evalSetBuiltin := testEval(testCase.input)
		testSetObject(t, testCase.input, evalSetBuiltin, testCase.expected)
	}
}

func TestSetBuiltinMethodsFailure(t *testing.T) {
	tests := []struct {
		input    string
		expected object.ObjectType
	}{
		{"var s = set(1, 2)\ns.add()", object.ErrorObj},
		{"var s = set(1, 2)\ns.add(1, 3)", object.ErrorObj},
		{"var s = set(1, 2)\ns.add([1, 2, 3])", object.RuntimeErrorObj},
		{"var s = set(1, 2, 4, 7)}\ns.remove()", object.ErrorObj},
		{"var s = set(1, 2, 4, 7)}\ns.remove(7, 1)", object.ErrorObj},
		{"var s = set(1, 2, 4, 7)}\ns.remove([1, 2, 3])", object.RuntimeErrorObj},
	}

	for _, testCase := range tests {
		evalSetBuiltin := testEval(testCase.input)
		testError(t, testCase.input, testCase.expected, evalSetBuiltin)
	}
}

func TestTryExpression(t *testing.T) {
	tests := []struct {
		input    string
		expected any
	}{
		{"var a = try 1\na", 1},
		{"var a = fun() { ret try 12 }\na()", 12},
		{"var a = fun() { ret try 1/0 }\na()", object.ErrorObj},
		{"var m = {\"test\": \"val\"}\nvar a = fun(m) { ret try m[\"err\"] }\na(m)", object.RuntimeErrorObj},
		{"var f = fun() {\n var a = try from_hex(\"jkjk\")\nret a\n }\nf()", object.RuntimeErrorObj},
	}

	for _, testCase := range tests {
		evalTryExpression := testEval(testCase.input)
		switch expected := testCase.expected.(type) {
		case int:
			testIntegerObject(t, testCase.input, evalTryExpression, int64(expected))
		case object.ObjectType:
			if evalTryExpression.Type() != expected {
				errExpr, isErr := evalTryExpression.(*object.Error)
				if isErr {
					fmt.Printf("Error: %s", errExpr.Message)
				}
				t.Errorf("Expected a %s object, got %s", expected, evalTryExpression.Type())
			}
		}
	}
}

func testEval(input string) object.Object {
	l := lexer.NewLexer(bufio.NewReader(bytes.NewBufferString(input)))
	p := parser.NewParser(l)
	program := p.ParseProgram()
	if len(p.Errors()) != 0 {
		return &object.Error{Message: strings.Join(p.Errors(), ", ")}
	}
	env := object.NewEnvironment()
	return Eval(program, env)
}

func testIntegerObject(t *testing.T, input string, obj object.Object, expected int64) bool {
	integerObj, ok := obj.(*object.Integer)
	if !ok {
		if isError(obj) || isRuntimeError(obj) {
			t.Errorf("%T: %s", obj, obj.Inspect())
		}
		t.Errorf("%s: expected object to be an Integer (%d), got %T", input, expected, obj)
		return false
	}

	if integerObj.Value != expected {
		t.Errorf("%s: expected %d, got %d", input, expected, integerObj.Value)
		return false
	}
	return true
}

func testStringObject(t *testing.T, obj object.Object, expected string) bool {
	strObj, ok := obj.(*object.String)
	if !ok {
		t.Errorf("expected object to be an string (%s), got %T", expected, obj)
		return false
	}

	if strObj.Value != expected {
		t.Errorf("expected %s, got %s", expected, strObj.Value)
		return false
	}
	return true
}

func testArrayObject(t *testing.T, input string, obj object.Object, expected []int64) bool {
	arrayObj, ok := obj.(*object.Array)
	if !ok {
		t.Errorf("expected object to be an Array, got %T", obj)
		return false
	}

	if len(arrayObj.Elements) != len(expected) {
		t.Errorf("expected array with %d elements, got %d", len(arrayObj.Elements), len(expected))
		return false
	}

	for idx, element := range arrayObj.Elements {
		if !testIntegerObject(t, input, element, expected[idx]) {
			return false
		}
	}
	return true
}

func testStringArrayObject(t *testing.T, obj object.Object, expected []string) bool {
	arrayObj, ok := obj.(*object.Array)
	if !ok {
		t.Errorf("expected object to be an Array, got %T", obj)
		return false
	}

	if len(arrayObj.Elements) != len(expected) {
		t.Errorf("expected array with %d elements, got %d", len(arrayObj.Elements), len(expected))
		return false
	}

	for idx, element := range arrayObj.Elements {
		if !testStringObject(t, element, expected[idx]) {
			return false
		}
	}
	return true
}

func testMapObject(t *testing.T, input string, obj object.Object, expected [][]int64) bool {
	mapObj, ok := obj.(*object.Map)
	if !ok {
		t.Errorf("expected object to be an Map, got %T", obj)
		return false
	}

	if len(mapObj.Mappings) != len(expected) {
		t.Errorf("expected map with %d elements, got %d", len(mapObj.Mappings), len(expected))
		return false
	}

	for _, pair := range expected {
		intKey := &object.Integer{Value: pair[0]}
		keyHash := intKey.HashKey()

		keyVal, contains := mapObj.Mappings[keyHash]

		if !contains {
			t.Errorf("expected to contain element with key %d", pair[0])
			return false
		}

		if !testIntegerObject(t, input, keyVal.Value, pair[1]) {
			return false
		}
	}
	return true
}
func testSetObject(t *testing.T, input string, obj object.Object, expected []int64) bool {
	mapObj, ok := obj.(*object.Set)
	if !ok {
		t.Errorf("expected object to be an Set, got %T", obj)
		return false
	}

	if len(mapObj.Elements) != len(expected) {
		t.Errorf("expected set with %d elements, got %d", len(mapObj.Elements), len(expected))
		return false
	}

	for _, expElem := range expected {
		intKey := &object.Integer{Value: expElem}
		keyHash := intKey.HashKey()

		elem, contains := mapObj.Elements[keyHash]

		if !contains {
			t.Errorf("expected to contain element with key %d", expElem)
			return false
		}

		if !testIntegerObject(t, input, elem, expElem) {
			return false
		}
	}
	return true
}

func testBooleanObject(t *testing.T, obj object.Object, expected bool) bool {
	booleanObj, ok := obj.(*object.Boolean)
	if !ok {
		t.Errorf("expected object to be an Boolean, got %T", obj)
		return false
	}

	if booleanObj.Value != expected {
		t.Errorf("expected %t, got %t", expected, booleanObj.Value)
		return false
	}
	return true
}

func testNullObject(t *testing.T, obj object.Object) bool {
	if obj != nil {
		t.Errorf("expected null, got %T", obj)
		return false
	}
	return true
}

func testError(t *testing.T, input string, expected object.ObjectType, eval object.Object) {
	if expected == object.RuntimeErrorObj && eval.Type() != object.RuntimeErrorObj {
		errExpr, isErr := eval.(*object.Error)
		if isErr {
			fmt.Printf("Error: %s", errExpr.Message)
		}
		t.Errorf("%s: Expected a %s object, got %s", input, expected, eval.Type())
	}
}

var elfFile = []byte{
	0x7f,
	0x45, 0x4c, 0x46, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x53, 0x00,
	0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x34, 0x00, 0x00, 0x00, 0x30, 0x24, 0x00, 0x00, 0x05, 0x00, 0x00,
	0x00, 0x34, 0x00, 0x20, 0x00, 0x02, 0x00, 0x28, 0x00, 0x0f, 0x00, 0x0e, 0x00, 0x01, 0x00, 0x00, 0x00, 0x74, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x96, 0x00, 0x00, 0x00, 0x96, 0x00, 0x00, 0x00, 0x05,
	0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x0a, 0x01, 0x00, 0x00, 0x00, 0x01, 0x80, 0x00,
	0x96, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
	0x00, 0x0c, 0x94, 0x38, 0x00, 0x0c, 0x94, 0x42, 0x00, 0x0c, 0x94, 0x42, 0x00, 0x0c, 0x94, 0x42, 0x00, 0x0c, 0x94,
	0x42, 0x00, 0x0c, 0x94, 0x42, 0x00, 0x0c, 0x94, 0x42, 0x00, 0x0c, 0x94, 0x42, 0x00, 0x0c, 0x94, 0x42, 0x00, 0x0c,
	0x94, 0x42, 0x00, 0x0c, 0x94, 0x42, 0x00, 0x0c, 0x94, 0x42, 0x00, 0x0c, 0x94, 0x42, 0x00, 0x0c, 0x94, 0x42, 0x00,
	0x0c, 0x94, 0x42, 0x00, 0x0c, 0x94, 0x42, 0x00, 0x0c, 0x94, 0x42, 0x00, 0x0c, 0x94, 0x42, 0x00, 0x0c, 0x94, 0x42,
	0x00, 0x0c, 0x94, 0x42, 0x00, 0x0c, 0x94, 0x42, 0x00, 0x0c, 0x94, 0x42, 0x00, 0x0c, 0x94, 0x42, 0x00, 0x0c, 0x94,
	0x42, 0x00, 0x0c, 0x94, 0x42, 0x00, 0x0c, 0x94, 0x42, 0x00, 0x0c, 0x94, 0x42, 0x00, 0x0c, 0x94, 0x42, 0x00, 0x11,
	0x24, 0x1f, 0xbe, 0xcf, 0xef, 0xd0, 0xe1, 0xde, 0xbf, 0xcd, 0xbf, 0x0e, 0x94, 0x44, 0x00, 0x0c, 0x94, 0x49, 0x00,
	0x0c, 0x94, 0x00, 0x00, 0xcf, 0x93, 0xdf, 0x93, 0xcd, 0xb7, 0xde, 0xb7, 0xff, 0xcf, 0xf8, 0x94, 0xff, 0xcf, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x47, 0x43, 0x43, 0x3a, 0x20, 0x28, 0x47, 0x4e, 0x55, 0x29, 0x20, 0x31, 0x31,
	0x2e, 0x33, 0x2e, 0x30, 0x00, 0x04, 0x00, 0x00, 0x00, 0x2c, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x41, 0x56,
	0x52, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x61, 0x74, 0x6d,
	0x65, 0x67, 0x61, 0x36, 0x34, 0x34, 0x00, 0x00, 0x1c, 0x00, 0x00, 0x00, 0x02, 0x00, 0x72, 0x06, 0x00, 0x00, 0x04,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x92, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x6e, 0x06, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x02, 0x0f, 0x00, 0x00, 0x00, 0x01, 0x08, 0x03, 0x17, 0x00, 0x00, 0x00, 0x02, 0x07, 0x04, 0x14,
	0x00, 0x00, 0x00, 0x05, 0x1b, 0x00, 0x00, 0x00, 0xff, 0x07, 0x00, 0x06, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x22,
	0x00, 0x00, 0x00, 0x01, 0x05, 0x03, 0x00, 0x00, 0x81, 0x00, 0x07, 0x29, 0x00, 0x00, 0x00, 0x00, 0x00, 0x14, 0x00,
	0x00, 0x00, 0x01, 0x05, 0x03, 0x7b, 0x00, 0x80, 0x00, 0x08, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00,
	0x00, 0x01, 0x05, 0x03, 0x50, 0x00, 0x80, 0x00, 0x09, 0x35, 0x00, 0x00, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00,
	0x01, 0x05, 0x03, 0x7f, 0x00, 0x80, 0x00, 0x0a, 0x3b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x01,
	0x05, 0x03, 0xc6, 0x00, 0x80, 0x00, 0x0b, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x01, 0x05,
	0x03, 0xc0, 0x00, 0x80, 0x00, 0x0c, 0x47, 0x00, 0x00, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x01, 0x05, 0x03,
	0xc1, 0x00, 0x80, 0x00, 0x0d, 0x4e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x01, 0x05, 0x03, 0xc2,
	0x00, 0x80, 0x00, 0x0e, 0x55, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1b, 0x00, 0x00, 0x00, 0x01, 0x05, 0x03, 0xc4, 0x00,
	0x80, 0x00, 0x0f, 0x5b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x01, 0x05, 0x03, 0x22, 0x00, 0x80,
	0x00, 0x10, 0x61, 0x00, 0x00, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x01, 0x05, 0x03, 0x21, 0x00, 0x80, 0x00,
	0x11, 0x66, 0x00, 0x00, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x01, 0x05, 0x03, 0x20, 0x00, 0x80, 0x00, 0x12,
	0x6b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x01, 0x05, 0x03, 0x25, 0x00, 0x80, 0x00, 0x13, 0x71,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x01, 0x05, 0x03, 0x24, 0x00, 0x80, 0x00, 0x14, 0x76, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x01, 0x05, 0x03, 0x23, 0x00, 0x80, 0x00, 0x15, 0x7b, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x01, 0x05, 0x03, 0x28, 0x00, 0x80, 0x00, 0x16, 0x81, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x01, 0x05, 0x03, 0x27, 0x00, 0x80, 0x00, 0x17, 0x86, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x14, 0x00, 0x00, 0x00, 0x01, 0x05, 0x03, 0x26, 0x00, 0x80, 0x00, 0x18, 0x8b, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x14, 0x00, 0x00, 0x00, 0x01, 0x05, 0x03, 0x2b, 0x00, 0x80, 0x00, 0x19, 0x91, 0x00, 0x00, 0x00, 0x00, 0x00, 0x14,
	0x00, 0x00, 0x00, 0x01, 0x05, 0x03, 0x2a, 0x00, 0x80, 0x00, 0x1a, 0x96, 0x00, 0x00, 0x00, 0x00, 0x00, 0x14, 0x00,
	0x00, 0x00, 0x01, 0x05, 0x03, 0x29, 0x00, 0x80, 0x00, 0x1b, 0x9b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00,
	0x00, 0x01, 0x05, 0x03, 0x48, 0x00, 0x80, 0x00, 0x1c, 0xa1, 0x00, 0x00, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00,
	0x01, 0x05, 0x03, 0x47, 0x00, 0x80, 0x00, 0x1d, 0xa7, 0x00, 0x00, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x01,
	0x05, 0x03, 0x46, 0x00, 0x80, 0x00, 0x1e, 0xad, 0x00, 0x00, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x01, 0x05,
	0x03, 0x45, 0x00, 0x80, 0x00, 0x1f, 0xb4, 0x00, 0x00, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x01, 0x05, 0x03,
	0x44, 0x00, 0x80, 0x00, 0x20, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x01, 0x05, 0x03, 0x6e,
	0x00, 0x80, 0x00, 0x21, 0xc2, 0x00, 0x00, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x01, 0x05, 0x03, 0x35, 0x00,
	0x80, 0x00, 0x22, 0xc8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x01, 0x05, 0x03, 0x43, 0x00, 0x80,
	0x00, 0x23, 0xce, 0x00, 0x00, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x01, 0x05, 0x03, 0x70, 0x00, 0x80, 0x00,
	0x24, 0xd5, 0x00, 0x00, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x01, 0x05, 0x03, 0x37, 0x00, 0x80, 0x00, 0x25,
	0xdb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x01, 0x05, 0x03, 0xb0, 0x00, 0x80, 0x00, 0x26, 0xe2,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x01, 0x05, 0x03, 0xb1, 0x00, 0x80, 0x00, 0x27, 0xe9, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x01, 0x05, 0x03, 0xb2, 0x00, 0x80, 0x00, 0x28, 0xef, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x01, 0x05, 0x03, 0xb4, 0x00, 0x80, 0x00, 0x29, 0xf5, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x01, 0x05, 0x03, 0xb3, 0x00, 0x80, 0x00, 0x2a, 0xfb, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x14, 0x00, 0x00, 0x00, 0x01, 0x05, 0x03, 0xb6, 0x00, 0x80, 0x00, 0x2b, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00,
	0x14, 0x00, 0x00, 0x00, 0x01, 0x05, 0x03, 0x43, 0x00, 0x80, 0x00, 0x2c, 0x06, 0x01, 0x00, 0x00, 0x00, 0x00, 0x14,
	0x00, 0x00, 0x00, 0x01, 0x05, 0x03, 0x60, 0x00, 0x80, 0x00, 0x2d, 0x0d, 0x01, 0x00, 0x00, 0x00, 0x00, 0x14, 0x00,
	0x00, 0x00, 0x01, 0x05, 0x03, 0x51, 0x00, 0x80, 0x00, 0x2e, 0x12, 0x01, 0x00, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00,
	0x00, 0x01, 0x05, 0x03, 0x55, 0x00, 0x80, 0x00, 0x2f, 0x18, 0x01, 0x00, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00,
	0x01, 0x05, 0x03, 0x54, 0x00, 0x80, 0x00, 0x30, 0x1e, 0x01, 0x00, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x01,
	0x05, 0x03, 0x57, 0x00, 0x80, 0x00, 0x31, 0x25, 0x01, 0x00, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x01, 0x05,
	0x03, 0x69, 0x00, 0x80, 0x00, 0x32, 0x2b, 0x01, 0x00, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x01, 0x05, 0x03,
	0x3d, 0x00, 0x80, 0x00, 0x33, 0x31, 0x01, 0x00, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x01, 0x05, 0x03, 0x3c,
	0x00, 0x80, 0x00, 0x34, 0x36, 0x01, 0x00, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x01, 0x05, 0x03, 0x73, 0x00,
	0x80, 0x00, 0x35, 0x3d, 0x01, 0x00, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x01, 0x05, 0x03, 0x6d, 0x00, 0x80,
	0x00, 0x36, 0x44, 0x01, 0x00, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x01, 0x05, 0x03, 0x6c, 0x00, 0x80, 0x00,
	0x37, 0x4b, 0x01, 0x00, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x01, 0x05, 0x03, 0x6b, 0x00, 0x80, 0x00, 0x38,
	0x52, 0x01, 0x00, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x01, 0x05, 0x03, 0x3b, 0x00, 0x80, 0x00, 0x39, 0x58,
	0x01, 0x00, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x01, 0x05, 0x03, 0x68, 0x00, 0x80, 0x00, 0x3a, 0x5e, 0x01,
	0x00, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x01, 0x05, 0x03, 0x7c, 0x00, 0x80, 0x00, 0x3b, 0x64, 0x01, 0x00,
	0x00, 0x00, 0x00, 0x1b, 0x00, 0x00, 0x00, 0x01, 0x05, 0x03, 0x78, 0x00, 0x80, 0x00, 0x3c, 0x68, 0x01, 0x00, 0x00,
	0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x01, 0x05, 0x03, 0x7a, 0x00, 0x80, 0x00, 0x3d, 0x6f, 0x01, 0x00, 0x00, 0x00,
	0x00, 0x14, 0x00, 0x00, 0x00, 0x01, 0x05, 0x03, 0x7b, 0x00, 0x80, 0x00, 0x3e, 0x76, 0x01, 0x00, 0x00, 0x00, 0x00,
	0x14, 0x00, 0x00, 0x00, 0x01, 0x05, 0x03, 0x7e, 0x00, 0x80, 0x00, 0x3f, 0x7c, 0x01, 0x00, 0x00, 0x00, 0x00, 0x14,
	0x00, 0x00, 0x00, 0x01, 0x05, 0x03, 0x6f, 0x00, 0x80, 0x00, 0x40, 0x83, 0x01, 0x00, 0x00, 0x00, 0x00, 0x14, 0x00,
	0x00, 0x00, 0x01, 0x05, 0x03, 0x36, 0x00, 0x80, 0x00, 0x41, 0x89, 0x01, 0x00, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00,
	0x00, 0x01, 0x05, 0x03, 0x80, 0x00, 0x80, 0x00, 0x42, 0x90, 0x01, 0x00, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00,
	0x01, 0x05, 0x03, 0x81, 0x00, 0x80, 0x00, 0x43, 0x97, 0x01, 0x00, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x01,
	0x05, 0x03, 0x82, 0x00, 0x80, 0x00, 0x44, 0x9e, 0x01, 0x00, 0x00, 0x00, 0x00, 0x1b, 0x00, 0x00, 0x00, 0x01, 0x05,
	0x03, 0x84, 0x00, 0x80, 0x00, 0x45, 0xa4, 0x01, 0x00, 0x00, 0x00, 0x00, 0x1b, 0x00, 0x00, 0x00, 0x01, 0x05, 0x03,
	0x88, 0x00, 0x80, 0x00, 0x46, 0xaa, 0x01, 0x00, 0x00, 0x00, 0x00, 0x1b, 0x00, 0x00, 0x00, 0x01, 0x05, 0x03, 0x8a,
	0x00, 0x80, 0x00, 0x47, 0xb0, 0x01, 0x00, 0x00, 0x00, 0x00, 0x1b, 0x00, 0x00, 0x00, 0x01, 0x05, 0x03, 0x86, 0x00,
	0x80, 0x00, 0x48, 0xb5, 0x01, 0x00, 0x00, 0x00, 0x00, 0x1b, 0x00, 0x00, 0x00, 0x01, 0x05, 0x03, 0x41, 0x00, 0x80,
	0x00, 0x49, 0xba, 0x01, 0x00, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x01, 0x05, 0x03, 0x40, 0x00, 0x80, 0x00,
	0x4a, 0xbf, 0x01, 0x00, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x01, 0x05, 0x03, 0x3f, 0x00, 0x80, 0x00, 0x4b,
	0xc4, 0x01, 0x00, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x01, 0x05, 0x03, 0xbd, 0x00, 0x80, 0x00, 0x4c, 0xca,
	0x01, 0x00, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x01, 0x05, 0x03, 0xb8, 0x00, 0x80, 0x00, 0x4d, 0xcf, 0x01,
	0x00, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x01, 0x05, 0x03, 0xbc, 0x00, 0x80, 0x00, 0x4e, 0xd4, 0x01, 0x00,
	0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x01, 0x05, 0x03, 0xb9, 0x00, 0x80, 0x00, 0x4f, 0xd9, 0x01, 0x00, 0x00,
	0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x01, 0x05, 0x03, 0xbb, 0x00, 0x80, 0x00, 0x50, 0xde, 0x01, 0x00, 0x00, 0x00,
	0x00, 0x14, 0x00, 0x00, 0x00, 0x01, 0x05, 0x03, 0xba, 0x00, 0x80, 0x00, 0x51, 0xe3, 0x01, 0x00, 0x00, 0x00, 0x00,
	0x14, 0x00, 0x00, 0x00, 0x01, 0x05, 0x03, 0x4e, 0x00, 0x80, 0x00, 0x52, 0xe8, 0x01, 0x00, 0x00, 0x00, 0x00, 0x14,
	0x00, 0x00, 0x00, 0x01, 0x05, 0x03, 0x4d, 0x00, 0x80, 0x00, 0x53, 0xed, 0x01, 0x00, 0x00, 0x00, 0x00, 0x14, 0x00,
	0x00, 0x00, 0x01, 0x05, 0x03, 0x4c, 0x00, 0x80, 0x00, 0x54, 0xf2, 0x01, 0x00, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00,
	0x00, 0x01, 0x05, 0x03, 0x5f, 0x00, 0x80, 0x00, 0x55, 0xf7, 0x01, 0x00, 0x00, 0x00, 0x00, 0x1b, 0x00, 0x00, 0x00,
	0x01, 0x05, 0x03, 0x5d, 0x00, 0x80, 0x00, 0x56, 0xfa, 0x01, 0x00, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x01,
	0x05, 0x03, 0x55, 0x00, 0x80, 0x00, 0x57, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x01, 0x05,
	0x03, 0x54, 0x00, 0x80, 0x00, 0x58, 0x06, 0x02, 0x00, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x01, 0x05, 0x03,
	0x66, 0x00, 0x80, 0x00, 0x59, 0x0d, 0x02, 0x00, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x01, 0x05, 0x03, 0x61,
	0x00, 0x80, 0x00, 0x5a, 0x13, 0x02, 0x00, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x01, 0x05, 0x03, 0x53, 0x00,
	0x80, 0x00, 0x5b, 0x18, 0x02, 0x00, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x01, 0x05, 0x03, 0x4b, 0x00, 0x80,
	0x00, 0x5c, 0x1f, 0x02, 0x00, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x01, 0x05, 0x03, 0x4a, 0x00, 0x80, 0x00,
	0x5d, 0x26, 0x02, 0x00, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x01, 0x05, 0x03, 0x3e, 0x00, 0x80, 0x00, 0x5e,
	0x2d, 0x02, 0x00, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x01, 0x05, 0x03, 0x64, 0x00, 0x80, 0x00, 0x00, 0x20,
	0x00, 0x00, 0x00, 0x05, 0x00, 0x01, 0x04, 0x19, 0x06, 0x00, 0x00, 0x01, 0x1d, 0x00, 0x00, 0x00, 0x92, 0x00, 0x00,
	0x00, 0x04, 0x31, 0x02, 0x00, 0x00, 0x5b, 0x02, 0x00, 0x00, 0x84, 0x02, 0x00, 0x00, 0x01, 0x80, 0x01, 0x11, 0x01,
	0x25, 0x0e, 0x10, 0x06, 0x00, 0x00, 0x02, 0x24, 0x00, 0x03, 0x0e, 0x0b, 0x0b, 0x3e, 0x0b, 0x00, 0x00, 0x03, 0x24,
	0x00, 0x03, 0x0e, 0x0b, 0x0b, 0x3e, 0x0b, 0x00, 0x00, 0x04, 0x01, 0x01, 0x49, 0x13, 0x00, 0x00, 0x05, 0x21, 0x00,
	0x49, 0x13, 0x2f, 0x05, 0x00, 0x00, 0x06, 0x34, 0x00, 0x03, 0x0e, 0x3a, 0x0b, 0x3b, 0x0b, 0x49, 0x13, 0x3f, 0x0c,
	0x02, 0x0a, 0x00, 0x00, 0x07, 0x34, 0x00, 0x03, 0x0e, 0x3a, 0x0b, 0x3b, 0x0b, 0x49, 0x13, 0x3f, 0x0c, 0x02, 0x0a,
	0x00, 0x00, 0x08, 0x34, 0x00, 0x03, 0x0e, 0x3a, 0x0b, 0x3b, 0x0b, 0x49, 0x13, 0x3f, 0x0c, 0x02, 0x0a, 0x00, 0x00,
	0x09, 0x34, 0x00, 0x03, 0x0e, 0x3a, 0x0b, 0x3b, 0x0b, 0x49, 0x13, 0x3f, 0x0c, 0x02, 0x0a, 0x00, 0x00, 0x0a, 0x34,
	0x00, 0x03, 0x0e, 0x3a, 0x0b, 0x3b, 0x0b, 0x49, 0x13, 0x3f, 0x0c, 0x02, 0x0a, 0x00, 0x00, 0x0b, 0x34, 0x00, 0x03,
	0x0e, 0x3a, 0x0b, 0x3b, 0x0b, 0x49, 0x13, 0x3f, 0x0c, 0x02, 0x0a, 0x00, 0x00, 0x0c, 0x34, 0x00, 0x03, 0x0e, 0x3a,
	0x0b, 0x3b, 0x0b, 0x49, 0x13, 0x3f, 0x0c, 0x02, 0x0a, 0x00, 0x00, 0x0d, 0x34, 0x00, 0x03, 0x0e, 0x3a, 0x0b, 0x3b,
	0x0b, 0x49, 0x13, 0x3f, 0x0c, 0x02, 0x0a, 0x00, 0x00, 0x0e, 0x34, 0x00, 0x03, 0x0e, 0x3a, 0x0b, 0x3b, 0x0b, 0x49,
	0x13, 0x3f, 0x0c, 0x02, 0x0a, 0x00, 0x00, 0x0f, 0x34, 0x00, 0x03, 0x0e, 0x3a, 0x0b, 0x3b, 0x0b, 0x49, 0x13, 0x3f,
	0x0c, 0x02, 0x0a, 0x00, 0x00, 0x10, 0x34, 0x00, 0x03, 0x0e, 0x3a, 0x0b, 0x3b, 0x0b, 0x49, 0x13, 0x3f, 0x0c, 0x02,
	0x0a, 0x00, 0x00, 0x11, 0x34, 0x00, 0x03, 0x0e, 0x3a, 0x0b, 0x3b, 0x0b, 0x49, 0x13, 0x3f, 0x0c, 0x02, 0x0a, 0x00,
	0x00, 0x12, 0x34, 0x00, 0x03, 0x0e, 0x3a, 0x0b, 0x3b, 0x0b, 0x49, 0x13, 0x3f, 0x0c, 0x02, 0x0a, 0x00, 0x00, 0x13,
	0x34, 0x00, 0x03, 0x0e, 0x3a, 0x0b, 0x3b, 0x0b, 0x49, 0x13, 0x3f, 0x0c, 0x02, 0x0a, 0x00, 0x00, 0x14, 0x34, 0x00,
	0x03, 0x0e, 0x3a, 0x0b, 0x3b, 0x0b, 0x49, 0x13, 0x3f, 0x0c, 0x02, 0x0a, 0x00, 0x00, 0x15, 0x34, 0x00, 0x03, 0x0e,
	0x3a, 0x0b, 0x3b, 0x0b, 0x49, 0x13, 0x3f, 0x0c, 0x02, 0x0a, 0x00, 0x00, 0x16, 0x34, 0x00, 0x03, 0x0e, 0x3a, 0x0b,
	0x3b, 0x0b, 0x49, 0x13, 0x3f, 0x0c, 0x02, 0x0a, 0x00, 0x00, 0x17, 0x34, 0x00, 0x03, 0x0e, 0x3a, 0x0b, 0x3b, 0x0b,
	0x49, 0x13, 0x3f, 0x0c, 0x02, 0x0a, 0x00, 0x00, 0x18, 0x34, 0x00, 0x03, 0x0e, 0x3a, 0x0b, 0x3b, 0x0b, 0x49, 0x13,
	0x3f, 0x0c, 0x02, 0x0a, 0x00, 0x00, 0x19, 0x34, 0x00, 0x03, 0x0e, 0x3a, 0x0b, 0x3b, 0x0b, 0x49, 0x13, 0x3f, 0x0c,
	0x02, 0x0a, 0x00, 0x00, 0x1a, 0x34, 0x00, 0x03, 0x0e, 0x3a, 0x0b, 0x3b, 0x0b, 0x49, 0x13, 0x3f, 0x0c, 0x02, 0x0a,
	0x00, 0x00, 0x1b, 0x34, 0x00, 0x03, 0x0e, 0x3a, 0x0b, 0x3b, 0x0b, 0x49, 0x13, 0x3f, 0x0c, 0x02, 0x0a, 0x00, 0x00,
	0x1c, 0x34, 0x00, 0x03, 0x0e, 0x3a, 0x0b, 0x3b, 0x0b, 0x49, 0x13, 0x3f, 0x0c, 0x02, 0x0a, 0x00, 0x00, 0x1d, 0x34,
	0x00, 0x03, 0x0e, 0x3a, 0x0b, 0x3b, 0x0b, 0x49, 0x13, 0x3f, 0x0c, 0x02, 0x0a, 0x00, 0x00, 0x1e, 0x34, 0x00, 0x03,
	0x0e, 0x3a, 0x0b, 0x3b, 0x0b, 0x49, 0x13, 0x3f, 0x0c, 0x02, 0x0a, 0x00, 0x00, 0x1f, 0x34, 0x00, 0x03, 0x0e, 0x3a,
	0x0b, 0x3b, 0x0b, 0x49, 0x13, 0x3f, 0x0c, 0x02, 0x0a, 0x00, 0x00, 0x20, 0x34, 0x00, 0x03, 0x0e, 0x3a, 0x0b, 0x3b,
	0x0b, 0x49, 0x13, 0x3f, 0x0c, 0x02, 0x0a, 0x00, 0x00, 0x21, 0x34, 0x00, 0x03, 0x0e, 0x3a, 0x0b, 0x3b, 0x0b, 0x49,
	0x13, 0x3f, 0x0c, 0x02, 0x0a, 0x00, 0x00, 0x22, 0x34, 0x00, 0x03, 0x0e, 0x3a, 0x0b, 0x3b, 0x0b, 0x49, 0x13, 0x3f,
	0x0c, 0x02, 0x0a, 0x00, 0x00, 0x23, 0x34, 0x00, 0x03, 0x0e, 0x3a, 0x0b, 0x3b, 0x0b, 0x49, 0x13, 0x3f, 0x0c, 0x02,
	0x0a, 0x00, 0x00, 0x24, 0x34, 0x00, 0x03, 0x0e, 0x3a, 0x0b, 0x3b, 0x0b, 0x49, 0x13, 0x3f, 0x0c, 0x02, 0x0a, 0x00,
	0x00, 0x25, 0x34, 0x00, 0x03, 0x0e, 0x3a, 0x0b, 0x3b, 0x0b, 0x49, 0x13, 0x3f, 0x0c, 0x02, 0x0a, 0x00, 0x00, 0x26,
	0x34, 0x00, 0x03, 0x0e, 0x3a, 0x0b, 0x3b, 0x0b, 0x49, 0x13, 0x3f, 0x0c, 0x02, 0x0a, 0x00, 0x00, 0x27, 0x34, 0x00,
	0x03, 0x0e, 0x3a, 0x0b, 0x3b, 0x0b, 0x49, 0x13, 0x3f, 0x0c, 0x02, 0x0a, 0x00, 0x00, 0x28, 0x34, 0x00, 0x03, 0x0e,
	0x3a, 0x0b, 0x3b, 0x0b, 0x49, 0x13, 0x3f, 0x0c, 0x02, 0x0a, 0x00, 0x00, 0x29, 0x34, 0x00, 0x03, 0x0e, 0x3a, 0x0b,
	0x3b, 0x0b, 0x49, 0x13, 0x3f, 0x0c, 0x02, 0x0a, 0x00, 0x00, 0x2a, 0x34, 0x00, 0x03, 0x0e, 0x3a, 0x0b, 0x3b, 0x0b,
	0x49, 0x13, 0x3f, 0x0c, 0x02, 0x0a, 0x00, 0x00, 0x2b, 0x34, 0x00, 0x03, 0x0e, 0x3a, 0x0b, 0x3b, 0x0b, 0x49, 0x13,
	0x3f, 0x0c, 0x02, 0x0a, 0x00, 0x00, 0x2c, 0x34, 0x00, 0x03, 0x0e, 0x3a, 0x0b, 0x3b, 0x0b, 0x49, 0x13, 0x3f, 0x0c,
	0x02, 0x0a, 0x00, 0x00, 0x2d, 0x34, 0x00, 0x03, 0x0e, 0x3a, 0x0b, 0x3b, 0x0b, 0x49, 0x13, 0x3f, 0x0c, 0x02, 0x0a,
	0x00, 0x00, 0x2e, 0x34, 0x00, 0x03, 0x0e, 0x3a, 0x0b, 0x3b, 0x0b, 0x49, 0x13, 0x3f, 0x0c, 0x02, 0x0a, 0x00, 0x00,
	0x2f, 0x34, 0x00, 0x03, 0x0e, 0x3a, 0x0b, 0x3b, 0x0b, 0x49, 0x13, 0x3f, 0x0c, 0x02, 0x0a, 0x00, 0x00, 0x30, 0x34,
	0x00, 0x03, 0x0e, 0x3a, 0x0b, 0x3b, 0x0b, 0x49, 0x13, 0x3f, 0x0c, 0x02, 0x0a, 0x00, 0x00, 0x31, 0x34, 0x00, 0x03,
	0x0e, 0x3a, 0x0b, 0x3b, 0x0b, 0x49, 0x13, 0x3f, 0x0c, 0x02, 0x0a, 0x00, 0x00, 0x32, 0x34, 0x00, 0x03, 0x0e, 0x3a,
	0x0b, 0x3b, 0x0b, 0x49, 0x13, 0x3f, 0x0c, 0x02, 0x0a, 0x00, 0x00, 0x33, 0x34, 0x00, 0x03, 0x0e, 0x3a, 0x0b, 0x3b,
	0x0b, 0x49, 0x13, 0x3f, 0x0c, 0x02, 0x0a, 0x00, 0x00, 0x34, 0x34, 0x00, 0x03, 0x0e, 0x3a, 0x0b, 0x3b, 0x0b, 0x49,
	0x13, 0x3f, 0x0c, 0x02, 0x0a, 0x00, 0x00, 0x35, 0x34, 0x00, 0x03, 0x0e, 0x3a, 0x0b, 0x3b, 0x0b, 0x49, 0x13, 0x3f,
	0x0c, 0x02, 0x0a, 0x00, 0x00, 0x36, 0x34, 0x00, 0x03, 0x0e, 0x3a, 0x0b, 0x3b, 0x0b, 0x49, 0x13, 0x3f, 0x0c, 0x02,
	0x0a, 0x00, 0x00, 0x37, 0x34, 0x00, 0x03, 0x0e, 0x3a, 0x0b, 0x3b, 0x0b, 0x49, 0x13, 0x3f, 0x0c, 0x02, 0x0a, 0x00,
	0x00, 0x38, 0x34, 0x00, 0x03, 0x0e, 0x3a, 0x0b, 0x3b, 0x0b, 0x49, 0x13, 0x3f, 0x0c, 0x02, 0x0a, 0x00, 0x00, 0x39,
	0x34, 0x00, 0x03, 0x0e, 0x3a, 0x0b, 0x3b, 0x0b, 0x49, 0x13, 0x3f, 0x0c, 0x02, 0x0a, 0x00, 0x00, 0x3a, 0x34, 0x00,
	0x03, 0x0e, 0x3a, 0x0b, 0x3b, 0x0b, 0x49, 0x13, 0x3f, 0x0c, 0x02, 0x0a, 0x00, 0x00, 0x3b, 0x34, 0x00, 0x03, 0x0e,
	0x3a, 0x0b, 0x3b, 0x0b, 0x49, 0x13, 0x3f, 0x0c, 0x02, 0x0a, 0x00, 0x00, 0x3c, 0x34, 0x00, 0x03, 0x0e, 0x3a, 0x0b,
	0x3b, 0x0b, 0x49, 0x13, 0x3f, 0x0c, 0x02, 0x0a, 0x00, 0x00, 0x3d, 0x34, 0x00, 0x03, 0x0e, 0x3a, 0x0b, 0x3b, 0x0b,
	0x49, 0x13, 0x3f, 0x0c, 0x02, 0x0a, 0x00, 0x00, 0x3e, 0x34, 0x00, 0x03, 0x0e, 0x3a, 0x0b, 0x3b, 0x0b, 0x49, 0x13,
	0x3f, 0x0c, 0x02, 0x0a, 0x00, 0x00, 0x3f, 0x34, 0x00, 0x03, 0x0e, 0x3a, 0x0b, 0x3b, 0x0b, 0x49, 0x13, 0x3f, 0x0c,
	0x02, 0x0a, 0x00, 0x00, 0x40, 0x34, 0x00, 0x03, 0x0e, 0x3a, 0x0b, 0x3b, 0x0b, 0x49, 0x13, 0x3f, 0x0c, 0x02, 0x0a,
	0x00, 0x00, 0x41, 0x34, 0x00, 0x03, 0x0e, 0x3a, 0x0b, 0x3b, 0x0b, 0x49, 0x13, 0x3f, 0x0c, 0x02, 0x0a, 0x00, 0x00,
	0x42, 0x34, 0x00, 0x03, 0x0e, 0x3a, 0x0b, 0x3b, 0x0b, 0x49, 0x13, 0x3f, 0x0c, 0x02, 0x0a, 0x00, 0x00, 0x43, 0x34,
	0x00, 0x03, 0x0e, 0x3a, 0x0b, 0x3b, 0x0b, 0x49, 0x13, 0x3f, 0x0c, 0x02, 0x0a, 0x00, 0x00, 0x44, 0x34, 0x00, 0x03,
	0x0e, 0x3a, 0x0b, 0x3b, 0x0b, 0x49, 0x13, 0x3f, 0x0c, 0x02, 0x0a, 0x00, 0x00, 0x45, 0x34, 0x00, 0x03, 0x0e, 0x3a,
	0x0b, 0x3b, 0x0b, 0x49, 0x13, 0x3f, 0x0c, 0x02, 0x0a, 0x00, 0x00, 0x46, 0x34, 0x00, 0x03, 0x0e, 0x3a, 0x0b, 0x3b,
	0x0b, 0x49, 0x13, 0x3f, 0x0c, 0x02, 0x0a, 0x00, 0x00, 0x47, 0x34, 0x00, 0x03, 0x0e, 0x3a, 0x0b, 0x3b, 0x0b, 0x49,
	0x13, 0x3f, 0x0c, 0x02, 0x0a, 0x00, 0x00, 0x48, 0x34, 0x00, 0x03, 0x0e, 0x3a, 0x0b, 0x3b, 0x0b, 0x49, 0x13, 0x3f,
	0x0c, 0x02, 0x0a, 0x00, 0x00, 0x49, 0x34, 0x00, 0x03, 0x0e, 0x3a, 0x0b, 0x3b, 0x0b, 0x49, 0x13, 0x3f, 0x0c, 0x02,
	0x0a, 0x00, 0x00, 0x4a, 0x34, 0x00, 0x03, 0x0e, 0x3a, 0x0b, 0x3b, 0x0b, 0x49, 0x13, 0x3f, 0x0c, 0x02, 0x0a, 0x00,
	0x00, 0x4b, 0x34, 0x00, 0x03, 0x0e, 0x3a, 0x0b, 0x3b, 0x0b, 0x49, 0x13, 0x3f, 0x0c, 0x02, 0x0a, 0x00, 0x00, 0x4c,
	0x34, 0x00, 0x03, 0x0e, 0x3a, 0x0b, 0x3b, 0x0b, 0x49, 0x13, 0x3f, 0x0c, 0x02, 0x0a, 0x00, 0x00, 0x4d, 0x34, 0x00,
	0x03, 0x0e, 0x3a, 0x0b, 0x3b, 0x0b, 0x49, 0x13, 0x3f, 0x0c, 0x02, 0x0a, 0x00, 0x00, 0x4e, 0x34, 0x00, 0x03, 0x0e,
	0x3a, 0x0b, 0x3b, 0x0b, 0x49, 0x13, 0x3f, 0x0c, 0x02, 0x0a, 0x00, 0x00, 0x4f, 0x34, 0x00, 0x03, 0x0e, 0x3a, 0x0b,
	0x3b, 0x0b, 0x49, 0x13, 0x3f, 0x0c, 0x02, 0x0a, 0x00, 0x00, 0x50, 0x34, 0x00, 0x03, 0x0e, 0x3a, 0x0b, 0x3b, 0x0b,
	0x49, 0x13, 0x3f, 0x0c, 0x02, 0x0a, 0x00, 0x00, 0x51, 0x34, 0x00, 0x03, 0x0e, 0x3a, 0x0b, 0x3b, 0x0b, 0x49, 0x13,
	0x3f, 0x0c, 0x02, 0x0a, 0x00, 0x00, 0x52, 0x34, 0x00, 0x03, 0x0e, 0x3a, 0x0b, 0x3b, 0x0b, 0x49, 0x13, 0x3f, 0x0c,
	0x02, 0x0a, 0x00, 0x00, 0x53, 0x34, 0x00, 0x03, 0x0e, 0x3a, 0x0b, 0x3b, 0x0b, 0x49, 0x13, 0x3f, 0x0c, 0x02, 0x0a,
	0x00, 0x00, 0x54, 0x34, 0x00, 0x03, 0x0e, 0x3a, 0x0b, 0x3b, 0x0b, 0x49, 0x13, 0x3f, 0x0c, 0x02, 0x0a, 0x00, 0x00,
	0x55, 0x34, 0x00, 0x03, 0x0e, 0x3a, 0x0b, 0x3b, 0x0b, 0x49, 0x13, 0x3f, 0x0c, 0x02, 0x0a, 0x00, 0x00, 0x56, 0x34,
	0x00, 0x03, 0x0e, 0x3a, 0x0b, 0x3b, 0x0b, 0x49, 0x13, 0x3f, 0x0c, 0x02, 0x0a, 0x00, 0x00, 0x57, 0x34, 0x00, 0x03,
	0x0e, 0x3a, 0x0b, 0x3b, 0x0b, 0x49, 0x13, 0x3f, 0x0c, 0x02, 0x0a, 0x00, 0x00, 0x58, 0x34, 0x00, 0x03, 0x0e, 0x3a,
	0x0b, 0x3b, 0x0b, 0x49, 0x13, 0x3f, 0x0c, 0x02, 0x0a, 0x00, 0x00, 0x59, 0x34, 0x00, 0x03, 0x0e, 0x3a, 0x0b, 0x3b,
	0x0b, 0x49, 0x13, 0x3f, 0x0c, 0x02, 0x0a, 0x00, 0x00, 0x5a, 0x34, 0x00, 0x03, 0x0e, 0x3a, 0x0b, 0x3b, 0x0b, 0x49,
	0x13, 0x3f, 0x0c, 0x02, 0x0a, 0x00, 0x00, 0x5b, 0x34, 0x00, 0x03, 0x0e, 0x3a, 0x0b, 0x3b, 0x0b, 0x49, 0x13, 0x3f,
	0x0c, 0x02, 0x0a, 0x00, 0x00, 0x5c, 0x34, 0x00, 0x03, 0x0e, 0x3a, 0x0b, 0x3b, 0x0b, 0x49, 0x13, 0x3f, 0x0c, 0x02,
	0x0a, 0x00, 0x00, 0x5d, 0x34, 0x00, 0x03, 0x0e, 0x3a, 0x0b, 0x3b, 0x0b, 0x49, 0x13, 0x3f, 0x0c, 0x02, 0x0a, 0x00,
	0x00, 0x5e, 0x34, 0x00, 0x03, 0x0e, 0x3a, 0x0b, 0x3b, 0x0b, 0x49, 0x13, 0x3f, 0x0c, 0x02, 0x0a, 0x00, 0x00, 0x00,
	0x01, 0x11, 0x00, 0x10, 0x17, 0x11, 0x01, 0x12, 0x0f, 0x03, 0x0e, 0x1b, 0x0e, 0x25, 0x0e, 0x13, 0x05, 0x00, 0x00,
	0x00, 0x19, 0x00, 0x00, 0x00, 0x03, 0x00, 0x13, 0x00, 0x00, 0x00, 0x02, 0x01, 0xfb, 0x0e, 0x0d, 0x00, 0x01, 0x01,
	0x01, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x4d, 0x00, 0x00, 0x00, 0x05, 0x00, 0x04, 0x00,
	0x2e, 0x00, 0x00, 0x00, 0x02, 0x01, 0x01, 0xfb, 0x0e, 0x0d, 0x00, 0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00, 0x01,
	0x00, 0x00, 0x01, 0x01, 0x01, 0x1f, 0x02, 0x00, 0x00, 0x00, 0x00, 0x29, 0x00, 0x00, 0x00, 0x02, 0x01, 0x1f, 0x02,
	0x0f, 0x02, 0x47, 0x00, 0x00, 0x00, 0x01, 0x47, 0x00, 0x00, 0x00, 0x01, 0x00, 0x05, 0x02, 0x92, 0x00, 0x00, 0x00,
	0x03, 0xe1, 0x11, 0x01, 0x03, 0x02, 0x09, 0x02, 0x00, 0x01, 0x09, 0x02, 0x00, 0x00, 0x01, 0x01, 0x61, 0x76, 0x72,
	0x2d, 0x6c, 0x69, 0x62, 0x63, 0x20, 0x32, 0x2e, 0x31, 0x2e, 0x30, 0x00, 0x75, 0x69, 0x6e, 0x74, 0x38, 0x5f, 0x74,
	0x00, 0x75, 0x69, 0x6e, 0x74, 0x31, 0x36, 0x5f, 0x74, 0x00, 0x5f, 0x5f, 0x65, 0x65, 0x70, 0x72, 0x6f, 0x6d, 0x00,
	0x41, 0x44, 0x43, 0x53, 0x52, 0x42, 0x00, 0x41, 0x43, 0x53, 0x52, 0x00, 0x44, 0x49, 0x44, 0x52, 0x31, 0x00, 0x55,
	0x44, 0x52, 0x30, 0x00, 0x55, 0x43, 0x53, 0x52, 0x30, 0x41, 0x00, 0x55, 0x43, 0x53, 0x52, 0x30, 0x42, 0x00, 0x55,
	0x43, 0x53, 0x52, 0x30, 0x43, 0x00, 0x55, 0x42, 0x52, 0x52, 0x30, 0x00, 0x50, 0x4f, 0x52, 0x54, 0x41, 0x00, 0x44,
	0x44, 0x52, 0x41, 0x00, 0x50, 0x49, 0x4e, 0x41, 0x00, 0x50, 0x4f, 0x52, 0x54, 0x42, 0x00, 0x44, 0x44, 0x52, 0x42,
	0x00, 0x50, 0x49, 0x4e, 0x42, 0x00, 0x50, 0x4f, 0x52, 0x54, 0x43, 0x00, 0x44, 0x44, 0x52, 0x43, 0x00, 0x50, 0x49,
	0x4e, 0x43, 0x00, 0x50, 0x4f, 0x52, 0x54, 0x44, 0x00, 0x44, 0x44, 0x52, 0x44, 0x00, 0x50, 0x49, 0x4e, 0x44, 0x00,
	0x4f, 0x43, 0x52, 0x30, 0x42, 0x00, 0x4f, 0x43, 0x52, 0x30, 0x41, 0x00, 0x54, 0x43, 0x4e, 0x54, 0x30, 0x00, 0x54,
	0x43, 0x43, 0x52, 0x30, 0x42, 0x00, 0x54, 0x43, 0x43, 0x52, 0x30, 0x41, 0x00, 0x54, 0x49, 0x4d, 0x53, 0x4b, 0x30,
	0x00, 0x54, 0x49, 0x46, 0x52, 0x30, 0x00, 0x47, 0x54, 0x43, 0x43, 0x52, 0x00, 0x54, 0x49, 0x4d, 0x53, 0x4b, 0x32,
	0x00, 0x54, 0x49, 0x46, 0x52, 0x32, 0x00, 0x54, 0x43, 0x43, 0x52, 0x32, 0x41, 0x00, 0x54, 0x43, 0x43, 0x52, 0x32,
	0x42, 0x00, 0x54, 0x43, 0x4e, 0x54, 0x32, 0x00, 0x4f, 0x43, 0x52, 0x32, 0x42, 0x00, 0x4f, 0x43, 0x52, 0x32, 0x41,
	0x00, 0x41, 0x53, 0x53, 0x52, 0x00, 0x47, 0x54, 0x43, 0x43, 0x52, 0x00, 0x57, 0x44, 0x54, 0x43, 0x53, 0x52, 0x00,
	0x4f, 0x43, 0x44, 0x52, 0x00, 0x4d, 0x43, 0x55, 0x43, 0x52, 0x00, 0x4d, 0x43, 0x55, 0x53, 0x52, 0x00, 0x53, 0x50,
	0x4d, 0x43, 0x53, 0x52, 0x00, 0x45, 0x49, 0x43, 0x52, 0x41, 0x00, 0x45, 0x49, 0x4d, 0x53, 0x4b, 0x00, 0x45, 0x49,
	0x46, 0x52, 0x00, 0x50, 0x43, 0x4d, 0x53, 0x4b, 0x33, 0x00, 0x50, 0x43, 0x4d, 0x53, 0x4b, 0x32, 0x00, 0x50, 0x43,
	0x4d, 0x53, 0x4b, 0x31, 0x00, 0x50, 0x43, 0x4d, 0x53, 0x4b, 0x30, 0x00, 0x50, 0x43, 0x49, 0x46, 0x52, 0x00, 0x50,
	0x43, 0x49, 0x43, 0x52, 0x00, 0x41, 0x44, 0x4d, 0x55, 0x58, 0x00, 0x41, 0x44, 0x43, 0x00, 0x41, 0x44, 0x43, 0x53,
	0x52, 0x41, 0x00, 0x41, 0x44, 0x43, 0x53, 0x52, 0x42, 0x00, 0x44, 0x49, 0x44, 0x52, 0x30, 0x00, 0x54, 0x49, 0x4d,
	0x53, 0x4b, 0x31, 0x00, 0x54, 0x49, 0x46, 0x52, 0x31, 0x00, 0x54, 0x43, 0x43, 0x52, 0x31, 0x41, 0x00, 0x54, 0x43,
	0x43, 0x52, 0x31, 0x42, 0x00, 0x54, 0x43, 0x43, 0x52, 0x31, 0x43, 0x00, 0x54, 0x43, 0x4e, 0x54, 0x31, 0x00, 0x4f,
	0x43, 0x52, 0x31, 0x41, 0x00, 0x4f, 0x43, 0x52, 0x31, 0x42, 0x00, 0x49, 0x43, 0x52, 0x31, 0x00, 0x45, 0x45, 0x41,
	0x52, 0x00, 0x45, 0x45, 0x44, 0x52, 0x00, 0x45, 0x45, 0x43, 0x52, 0x00, 0x54, 0x57, 0x41, 0x4d, 0x52, 0x00, 0x54,
	0x57, 0x42, 0x52, 0x00, 0x54, 0x57, 0x43, 0x52, 0x00, 0x54, 0x57, 0x53, 0x52, 0x00, 0x54, 0x57, 0x44, 0x52, 0x00,
	0x54, 0x57, 0x41, 0x52, 0x00, 0x53, 0x50, 0x44, 0x52, 0x00, 0x53, 0x50, 0x53, 0x52, 0x00, 0x53, 0x50, 0x43, 0x52,
	0x00, 0x53, 0x52, 0x45, 0x47, 0x00, 0x53, 0x50, 0x00, 0x4d, 0x43, 0x55, 0x43, 0x52, 0x00, 0x4d, 0x43, 0x55, 0x53,
	0x52, 0x00, 0x4f, 0x53, 0x43, 0x43, 0x41, 0x4c, 0x00, 0x43, 0x4c, 0x4b, 0x50, 0x52, 0x00, 0x53, 0x4d, 0x43, 0x52,
	0x00, 0x47, 0x50, 0x49, 0x4f, 0x52, 0x32, 0x00, 0x47, 0x50, 0x49, 0x4f, 0x52, 0x31, 0x00, 0x47, 0x50, 0x49, 0x4f,
	0x52, 0x30, 0x00, 0x50, 0x52, 0x52, 0x00, 0x2e, 0x2e, 0x2f, 0x2e, 0x2e, 0x2f, 0x2e, 0x2e, 0x2f, 0x2e, 0x2e, 0x2f,
	0x6c, 0x69, 0x62, 0x67, 0x63, 0x63, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x61, 0x76, 0x72, 0x2f, 0x6c,
	0x69, 0x62, 0x31, 0x66, 0x75, 0x6e, 0x63, 0x73, 0x2e, 0x53, 0x00, 0x2f, 0x62, 0x61, 0x73, 0x65, 0x2f, 0x67, 0x63,
	0x63, 0x2d, 0x31, 0x31, 0x2e, 0x33, 0x2e, 0x30, 0x2f, 0x6f, 0x62, 0x6a, 0x2d, 0x61, 0x76, 0x72, 0x2f, 0x61, 0x76,
	0x72, 0x2f, 0x61, 0x76, 0x72, 0x35, 0x2f, 0x6c, 0x69, 0x62, 0x67, 0x63, 0x63, 0x00, 0x47, 0x4e, 0x55, 0x20, 0x41,
	0x53, 0x20, 0x32, 0x2e, 0x33, 0x38, 0x00, 0x2f, 0x62, 0x61, 0x73, 0x65, 0x2f, 0x67, 0x63, 0x63, 0x2d, 0x31, 0x31,
	0x2e, 0x33, 0x2e, 0x30, 0x2f, 0x6f, 0x62, 0x6a, 0x2d, 0x61, 0x76, 0x72, 0x2f, 0x61, 0x76, 0x72, 0x2f, 0x61, 0x76,
	0x72, 0x35, 0x2f, 0x6c, 0x69, 0x62, 0x67, 0x63, 0x63, 0x00, 0x2e, 0x2e, 0x2f, 0x2e, 0x2e, 0x2f, 0x2e, 0x2e, 0x2f,
	0x2e, 0x2e, 0x2f, 0x6c, 0x69, 0x62, 0x67, 0x63, 0x63, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x61, 0x76,
	0x72, 0x00, 0x6c, 0x69, 0x62, 0x31, 0x66, 0x75, 0x6e, 0x63, 0x73, 0x2e, 0x53, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x80, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x03, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00,
	0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x04, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x03, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
	0x00, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x0a, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x0b, 0x00, 0x01, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0xf1, 0xff, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x2b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x09, 0x00, 0x39, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a,
	0x00, 0x48, 0x00, 0x00, 0x00, 0x17, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x58, 0x00,
	0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x60, 0x00, 0x00, 0x00, 0x29,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x68, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x70, 0x00, 0x00, 0x00, 0x35, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x0a, 0x00, 0x78, 0x00, 0x00, 0x00, 0x3b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x0a, 0x00, 0x81, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x8a,
	0x00, 0x00, 0x00, 0x47, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x93, 0x00, 0x00, 0x00,
	0x4e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x9c, 0x00, 0x00, 0x00, 0x55, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x00, 0xa5, 0x00, 0x00, 0x00, 0x5b, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x0a, 0x00, 0xae, 0x00, 0x00, 0x00, 0x61, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x0a, 0x00, 0xb7, 0x00, 0x00, 0x00, 0x66, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x00,
	0xc0, 0x00, 0x00, 0x00, 0x6b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x00, 0xc9, 0x00, 0x00,
	0x00, 0x71, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x00, 0xd2, 0x00, 0x00, 0x00, 0x76, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x00, 0xdb, 0x00, 0x00, 0x00, 0x7b, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x00, 0xe4, 0x00, 0x00, 0x00, 0x81, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x0a, 0x00, 0xed, 0x00, 0x00, 0x00, 0x86, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a,
	0x00, 0xf6, 0x00, 0x00, 0x00, 0x8b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x00, 0xff, 0x00,
	0x00, 0x00, 0x91, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x08, 0x01, 0x00, 0x00, 0x96,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x11, 0x01, 0x00, 0x00, 0x9b, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x1a, 0x01, 0x00, 0x00, 0xa1, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x0a, 0x00, 0x23, 0x01, 0x00, 0x00, 0xa7, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x0a, 0x00, 0x2c, 0x01, 0x00, 0x00, 0xad, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x35,
	0x01, 0x00, 0x00, 0xb4, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x3e, 0x01, 0x00, 0x00,
	0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x47, 0x01, 0x00, 0x00, 0xc2, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x50, 0x01, 0x00, 0x00, 0xc8, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x59, 0x01, 0x00, 0x00, 0xce, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x0a, 0x00, 0x62, 0x01, 0x00, 0x00, 0xd5, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x00,
	0x6b, 0x01, 0x00, 0x00, 0xdb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x74, 0x01, 0x00,
	0x00, 0xe2, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x7d, 0x01, 0x00, 0x00, 0xe9, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x86, 0x01, 0x00, 0x00, 0xef, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x8f, 0x01, 0x00, 0x00, 0xf5, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x0a, 0x00, 0x98, 0x01, 0x00, 0x00, 0xfb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a,
	0x00, 0xa1, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x00, 0xaa, 0x01,
	0x00, 0x00, 0x06, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x00, 0xb3, 0x01, 0x00, 0x00, 0x0d,
	0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x00, 0xbc, 0x01, 0x00, 0x00, 0x12, 0x01, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x00, 0xc5, 0x01, 0x00, 0x00, 0x18, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x0a, 0x00, 0xce, 0x01, 0x00, 0x00, 0x1e, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x0a, 0x00, 0xd7, 0x01, 0x00, 0x00, 0x25, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x00, 0xe0,
	0x01, 0x00, 0x00, 0x2b, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x00, 0xe9, 0x01, 0x00, 0x00,
	0x31, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x00, 0xf2, 0x01, 0x00, 0x00, 0x36, 0x01, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x00, 0xfb, 0x01, 0x00, 0x00, 0x3d, 0x01, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x04, 0x02, 0x00, 0x00, 0x44, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x0a, 0x00, 0x0d, 0x02, 0x00, 0x00, 0x4b, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x00,
	0x16, 0x02, 0x00, 0x00, 0x52, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x1f, 0x02, 0x00,
	0x00, 0x58, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x28, 0x02, 0x00, 0x00, 0x5e, 0x01,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x31, 0x02, 0x00, 0x00, 0x64, 0x01, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x3a, 0x02, 0x00, 0x00, 0x68, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x0a, 0x00, 0x43, 0x02, 0x00, 0x00, 0x6f, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a,
	0x00, 0x4c, 0x02, 0x00, 0x00, 0x76, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x55, 0x02,
	0x00, 0x00, 0x7c, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x5e, 0x02, 0x00, 0x00, 0x83,
	0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x67, 0x02, 0x00, 0x00, 0x89, 0x01, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x70, 0x02, 0x00, 0x00, 0x90, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x0a, 0x00, 0x79, 0x02, 0x00, 0x00, 0x97, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x0a, 0x00, 0x82, 0x02, 0x00, 0x00, 0x9e, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x8b,
	0x02, 0x00, 0x00, 0xa4, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x94, 0x02, 0x00, 0x00,
	0xaa, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x9d, 0x02, 0x00, 0x00, 0xb0, 0x01, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x00, 0xa6, 0x02, 0x00, 0x00, 0xb5, 0x01, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x0a, 0x00, 0xaf, 0x02, 0x00, 0x00, 0xba, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x0a, 0x00, 0xb8, 0x02, 0x00, 0x00, 0xbf, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x00,
	0xc1, 0x02, 0x00, 0x00, 0xc4, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x00, 0xca, 0x02, 0x00,
	0x00, 0xca, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x00, 0xd3, 0x02, 0x00, 0x00, 0xcf, 0x01,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x00, 0xdc, 0x02, 0x00, 0x00, 0xd4, 0x01, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x00, 0xe5, 0x02, 0x00, 0x00, 0xd9, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x0a, 0x00, 0xee, 0x02, 0x00, 0x00, 0xde, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a,
	0x00, 0xf7, 0x02, 0x00, 0x00, 0xe3, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x00, 0x03,
	0x00, 0x00, 0xe8, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x09, 0x03, 0x00, 0x00, 0xed,
	0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x12, 0x03, 0x00, 0x00, 0xf2, 0x01, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x1b, 0x03, 0x00, 0x00, 0xf7, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x0a, 0x00, 0x24, 0x03, 0x00, 0x00, 0xfa, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x0a, 0x00, 0x2d, 0x03, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x36,
	0x03, 0x00, 0x00, 0x06, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x3f, 0x03, 0x00, 0x00,
	0x0d, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x48, 0x03, 0x00, 0x00, 0x13, 0x02, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x51, 0x03, 0x00, 0x00, 0x18, 0x02, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x5a, 0x03, 0x00, 0x00, 0x1f, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x0a, 0x00, 0x63, 0x03, 0x00, 0x00, 0x26, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x00,
	0x6c, 0x03, 0x00, 0x00, 0x2d, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x75, 0x03, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0xf1, 0xff, 0x7c, 0x03, 0x00, 0x00, 0x3e, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf1, 0xff, 0x85, 0x03, 0x00, 0x00, 0x3d, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0xf1, 0xff, 0x8e, 0x03, 0x00, 0x00, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0xf1, 0xff, 0x97, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf1,
	0xff, 0xa3, 0x03, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf1, 0xff, 0xb0, 0x03,
	0x00, 0x00, 0x90, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0xb4, 0x03, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0xf1, 0xff, 0xbc, 0x03, 0x00, 0x00, 0x92, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0xc3, 0x03, 0x00, 0x00, 0x94, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x03, 0x00, 0xd2, 0x03, 0x00, 0x00, 0x94, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x03, 0x00, 0xd9, 0x03, 0x00, 0x00, 0x96, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0xd9,
	0x03, 0x00, 0x00, 0x92, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0xd9, 0x03, 0x00, 0x00,
	0x96, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0xdd, 0x03, 0x00, 0x00, 0x84, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x03, 0x00, 0xe9, 0x03, 0x00, 0x00, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x20, 0x00, 0x03, 0x00, 0xf4, 0x03, 0x00, 0x00, 0xa0, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10,
	0x00, 0xf1, 0xff, 0x0b, 0x04, 0x00, 0x00, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x03, 0x00,
	0x1f, 0x04, 0x00, 0x00, 0x96, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x03, 0x00, 0x26, 0x04, 0x00,
	0x00, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x03, 0x00, 0x32, 0x04, 0x00, 0x00, 0x84, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x03, 0x00, 0x3e, 0x04, 0x00, 0x00, 0x84, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x10, 0x00, 0x03, 0x00, 0x4e, 0x04, 0x00, 0x00, 0x96, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x10, 0x00, 0xf1, 0xff, 0x5e, 0x04, 0x00, 0x00, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x03,
	0x00, 0x69, 0x04, 0x00, 0x00, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x03, 0x00, 0x7b, 0x04,
	0x00, 0x00, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x03, 0x00, 0x86, 0x04, 0x00, 0x00, 0x84,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x03, 0x00, 0x92, 0x04, 0x00, 0x00, 0x96, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0xf1, 0xff, 0xa4, 0x04, 0x00, 0x00, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x10, 0x00, 0x03, 0x00, 0xb0, 0x04, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00,
	0xf1, 0xff, 0xc7, 0x04, 0x00, 0x00, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x03, 0x00, 0xd3,
	0x04, 0x00, 0x00, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x03, 0x00, 0xdf, 0x04, 0x00, 0x00,
	0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x03, 0x00, 0xe6, 0x04, 0x00, 0x00, 0x84, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x03, 0x00, 0xf2, 0x04, 0x00, 0x00, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x20, 0x00, 0x03, 0x00, 0xfe, 0x04, 0x00, 0x00, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20,
	0x00, 0x03, 0x00, 0x0a, 0x05, 0x00, 0x00, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x03, 0x00,
	0x15, 0x05, 0x00, 0x00, 0x00, 0x00, 0x81, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x03, 0x00, 0x22, 0x05, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x03, 0x00, 0x2c, 0x05, 0x00, 0x00, 0x84, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x03, 0x00, 0x38, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x20, 0x00, 0x03, 0x00, 0x49, 0x05, 0x00, 0x00, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x20, 0x00, 0x03, 0x00, 0x54, 0x05, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0xf1,
	0xff, 0x70, 0x05, 0x00, 0x00, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x03, 0x00, 0x0c, 0x06,
	0x00, 0x00, 0x00, 0x01, 0x80, 0x00, 0x40, 0x00, 0x00, 0x00, 0x11, 0x00, 0x02, 0x00, 0x7e, 0x05, 0x00, 0x00, 0x88,
	0x00, 0x00, 0x00, 0x0a, 0x00, 0x00, 0x00, 0x12, 0x00, 0x03, 0x00, 0x83, 0x05, 0x00, 0x00, 0x84, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x03, 0x00, 0x8e, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x20, 0x00, 0xf1, 0xff, 0x99, 0x05, 0x00, 0x00, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00,
	0x03, 0x00, 0xa4, 0x05, 0x00, 0x00, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x03, 0x00, 0xaf,
	0x05, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0xf1, 0xff, 0xd0, 0x05, 0x00, 0x00,
	0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x03, 0x00, 0xdc, 0x05, 0x00, 0x00, 0x84, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x03, 0x00, 0xe8, 0x05, 0x00, 0x00, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x10, 0x00, 0x03, 0x00, 0xf6, 0x05, 0x00, 0x00, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10,
	0x00, 0x03, 0x00, 0x02, 0x06, 0x00, 0x00, 0xff, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0xf1, 0xff,
	0x0a, 0x06, 0x00, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x01, 0x00, 0x59, 0x04, 0x00,
	0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x03, 0x00, 0x11, 0x06, 0x00, 0x00, 0x84, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x03, 0x00, 0x1c, 0x06, 0x00, 0x00, 0x84, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x20, 0x00, 0x03, 0x00, 0x42, 0x06, 0x00, 0x00, 0x92, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x20, 0x02, 0x03, 0x00, 0x28, 0x06, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0xf1,
	0xff, 0x41, 0x06, 0x00, 0x00, 0x92, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x02, 0x03, 0x00, 0x47, 0x06,
	0x00, 0x00, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x03, 0x00, 0x53, 0x06, 0x00, 0x00, 0x84,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x03, 0x00, 0x5f, 0x06, 0x00, 0x00, 0x84, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x03, 0x00, 0x6b, 0x06, 0x00, 0x00, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x20, 0x00, 0x03, 0x00, 0x77, 0x06, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00,
	0xf1, 0xff, 0x8e, 0x06, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0xf1, 0xff, 0xa5,
	0x06, 0x00, 0x00, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x03, 0x00, 0x00, 0x63, 0x72, 0x74,
	0x61, 0x74, 0x6d, 0x65, 0x67, 0x61, 0x36, 0x34, 0x34, 0x2e, 0x6f, 0x00, 0x2e, 0x4c, 0x64, 0x65, 0x62, 0x75, 0x67,
	0x5f, 0x61, 0x62, 0x62, 0x72, 0x65, 0x76, 0x30, 0x00, 0x2e, 0x4c, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72,
	0x00, 0x2e, 0x4c, 0x64, 0x65, 0x62, 0x75, 0x67, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x30, 0x00, 0x2e, 0x4c, 0x75, 0x69,
	0x6e, 0x74, 0x38, 0x5f, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x00, 0x2e, 0x4c, 0x75, 0x69, 0x6e, 0x74, 0x31, 0x36,
	0x5f, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x00, 0x2e, 0x4c, 0x6e, 0x61, 0x6d, 0x65, 0x36, 0x00, 0x2e, 0x4c, 0x6e,
	0x61, 0x6d, 0x65, 0x37, 0x00, 0x2e, 0x4c, 0x6e, 0x61, 0x6d, 0x65, 0x38, 0x00, 0x2e, 0x4c, 0x6e, 0x61, 0x6d, 0x65,
	0x39, 0x00, 0x2e, 0x4c, 0x6e, 0x61, 0x6d, 0x65, 0x31, 0x30, 0x00, 0x2e, 0x4c, 0x6e, 0x61, 0x6d, 0x65, 0x31, 0x31,
	0x00, 0x2e, 0x4c, 0x6e, 0x61, 0x6d, 0x65, 0x31, 0x32, 0x00, 0x2e, 0x4c, 0x6e, 0x61, 0x6d, 0x65, 0x31, 0x33, 0x00,
	0x2e, 0x4c, 0x6e, 0x61, 0x6d, 0x65, 0x31, 0x34, 0x00, 0x2e, 0x4c, 0x6e, 0x61, 0x6d, 0x65, 0x31, 0x35, 0x00, 0x2e,
	0x4c, 0x6e, 0x61, 0x6d, 0x65, 0x31, 0x36, 0x00, 0x2e, 0x4c, 0x6e, 0x61, 0x6d, 0x65, 0x31, 0x37, 0x00, 0x2e, 0x4c,
	0x6e, 0x61, 0x6d, 0x65, 0x31, 0x38, 0x00, 0x2e, 0x4c, 0x6e, 0x61, 0x6d, 0x65, 0x31, 0x39, 0x00, 0x2e, 0x4c, 0x6e,
	0x61, 0x6d, 0x65, 0x32, 0x30, 0x00, 0x2e, 0x4c, 0x6e, 0x61, 0x6d, 0x65, 0x32, 0x31, 0x00, 0x2e, 0x4c, 0x6e, 0x61,
	0x6d, 0x65, 0x32, 0x32, 0x00, 0x2e, 0x4c, 0x6e, 0x61, 0x6d, 0x65, 0x32, 0x33, 0x00, 0x2e, 0x4c, 0x6e, 0x61, 0x6d,
	0x65, 0x32, 0x34, 0x00, 0x2e, 0x4c, 0x6e, 0x61, 0x6d, 0x65, 0x32, 0x35, 0x00, 0x2e, 0x4c, 0x6e, 0x61, 0x6d, 0x65,
	0x32, 0x36, 0x00, 0x2e, 0x4c, 0x6e, 0x61, 0x6d, 0x65, 0x32, 0x37, 0x00, 0x2e, 0x4c, 0x6e, 0x61, 0x6d, 0x65, 0x32,
	0x38, 0x00, 0x2e, 0x4c, 0x6e, 0x61, 0x6d, 0x65, 0x32, 0x39, 0x00, 0x2e, 0x4c, 0x6e, 0x61, 0x6d, 0x65, 0x33, 0x30,
	0x00, 0x2e, 0x4c, 0x6e, 0x61, 0x6d, 0x65, 0x33, 0x31, 0x00, 0x2e, 0x4c, 0x6e, 0x61, 0x6d, 0x65, 0x33, 0x32, 0x00,
	0x2e, 0x4c, 0x6e, 0x61, 0x6d, 0x65, 0x33, 0x33, 0x00, 0x2e, 0x4c, 0x6e, 0x61, 0x6d, 0x65, 0x33, 0x34, 0x00, 0x2e,
	0x4c, 0x6e, 0x61, 0x6d, 0x65, 0x33, 0x35, 0x00, 0x2e, 0x4c, 0x6e, 0x61, 0x6d, 0x65, 0x33, 0x36, 0x00, 0x2e, 0x4c,
	0x6e, 0x61, 0x6d, 0x65, 0x33, 0x37, 0x00, 0x2e, 0x4c, 0x6e, 0x61, 0x6d, 0x65, 0x33, 0x38, 0x00, 0x2e, 0x4c, 0x6e,
	0x61, 0x6d, 0x65, 0x33, 0x39, 0x00, 0x2e, 0x4c, 0x6e, 0x61, 0x6d, 0x65, 0x34, 0x30, 0x00, 0x2e, 0x4c, 0x6e, 0x61,
	0x6d, 0x65, 0x34, 0x31, 0x00, 0x2e, 0x4c, 0x6e, 0x61, 0x6d, 0x65, 0x34, 0x32, 0x00, 0x2e, 0x4c, 0x6e, 0x61, 0x6d,
	0x65, 0x34, 0x33, 0x00, 0x2e, 0x4c, 0x6e, 0x61, 0x6d, 0x65, 0x34, 0x34, 0x00, 0x2e, 0x4c, 0x6e, 0x61, 0x6d, 0x65,
	0x34, 0x35, 0x00, 0x2e, 0x4c, 0x6e, 0x61, 0x6d, 0x65, 0x34, 0x36, 0x00, 0x2e, 0x4c, 0x6e, 0x61, 0x6d, 0x65, 0x34,
	0x37, 0x00, 0x2e, 0x4c, 0x6e, 0x61, 0x6d, 0x65, 0x34, 0x38, 0x00, 0x2e, 0x4c, 0x6e, 0x61, 0x6d, 0x65, 0x34, 0x39,
	0x00, 0x2e, 0x4c, 0x6e, 0x61, 0x6d, 0x65, 0x35, 0x30, 0x00, 0x2e, 0x4c, 0x6e, 0x61, 0x6d, 0x65, 0x35, 0x31, 0x00,
	0x2e, 0x4c, 0x6e, 0x61, 0x6d, 0x65, 0x35, 0x32, 0x00, 0x2e, 0x4c, 0x6e, 0x61, 0x6d, 0x65, 0x35, 0x33, 0x00, 0x2e,
	0x4c, 0x6e, 0x61, 0x6d, 0x65, 0x35, 0x34, 0x00, 0x2e, 0x4c, 0x6e, 0x61, 0x6d, 0x65, 0x35, 0x35, 0x00, 0x2e, 0x4c,
	0x6e, 0x61, 0x6d, 0x65, 0x35, 0x36, 0x00, 0x2e, 0x4c, 0x6e, 0x61, 0x6d, 0x65, 0x35, 0x37, 0x00, 0x2e, 0x4c, 0x6e,
	0x61, 0x6d, 0x65, 0x35, 0x38, 0x00, 0x2e, 0x4c, 0x6e, 0x61, 0x6d, 0x65, 0x35, 0x39, 0x00, 0x2e, 0x4c, 0x6e, 0x61,
	0x6d, 0x65, 0x36, 0x30, 0x00, 0x2e, 0x4c, 0x6e, 0x61, 0x6d, 0x65, 0x36, 0x31, 0x00, 0x2e, 0x4c, 0x6e, 0x61, 0x6d,
	0x65, 0x36, 0x32, 0x00, 0x2e, 0x4c, 0x6e, 0x61, 0x6d, 0x65, 0x36, 0x33, 0x00, 0x2e, 0x4c, 0x6e, 0x61, 0x6d, 0x65,
	0x36, 0x34, 0x00, 0x2e, 0x4c, 0x6e, 0x61, 0x6d, 0x65, 0x36, 0x35, 0x00, 0x2e, 0x4c, 0x6e, 0x61, 0x6d, 0x65, 0x36,
	0x36, 0x00, 0x2e, 0x4c, 0x6e, 0x61, 0x6d, 0x65, 0x36, 0x37, 0x00, 0x2e, 0x4c, 0x6e, 0x61, 0x6d, 0x65, 0x36, 0x38,
	0x00, 0x2e, 0x4c, 0x6e, 0x61, 0x6d, 0x65, 0x36, 0x39, 0x00, 0x2e, 0x4c, 0x6e, 0x61, 0x6d, 0x65, 0x37, 0x30, 0x00,
	0x2e, 0x4c, 0x6e, 0x61, 0x6d, 0x65, 0x37, 0x31, 0x00, 0x2e, 0x4c, 0x6e, 0x61, 0x6d, 0x65, 0x37, 0x32, 0x00, 0x2e,
	0x4c, 0x6e, 0x61, 0x6d, 0x65, 0x37, 0x33, 0x00, 0x2e, 0x4c, 0x6e, 0x61, 0x6d, 0x65, 0x37, 0x34, 0x00, 0x2e, 0x4c,
	0x6e, 0x61, 0x6d, 0x65, 0x37, 0x35, 0x00, 0x2e, 0x4c, 0x6e, 0x61, 0x6d, 0x65, 0x37, 0x36, 0x00, 0x2e, 0x4c, 0x6e,
	0x61, 0x6d, 0x65, 0x37, 0x37, 0x00, 0x2e, 0x4c, 0x6e, 0x61, 0x6d, 0x65, 0x37, 0x38, 0x00, 0x2e, 0x4c, 0x6e, 0x61,
	0x6d, 0x65, 0x37, 0x39, 0x00, 0x2e, 0x4c, 0x6e, 0x61, 0x6d, 0x65, 0x38, 0x30, 0x00, 0x2e, 0x4c, 0x6e, 0x61, 0x6d,
	0x65, 0x38, 0x31, 0x00, 0x2e, 0x4c, 0x6e, 0x61, 0x6d, 0x65, 0x38, 0x32, 0x00, 0x2e, 0x4c, 0x6e, 0x61, 0x6d, 0x65,
	0x38, 0x33, 0x00, 0x2e, 0x4c, 0x6e, 0x61, 0x6d, 0x65, 0x38, 0x34, 0x00, 0x2e, 0x4c, 0x6e, 0x61, 0x6d, 0x65, 0x38,
	0x35, 0x00, 0x2e, 0x4c, 0x6e, 0x61, 0x6d, 0x65, 0x38, 0x36, 0x00, 0x2e, 0x4c, 0x6e, 0x61, 0x6d, 0x65, 0x38, 0x37,
	0x00, 0x2e, 0x4c, 0x6e, 0x61, 0x6d, 0x65, 0x38, 0x38, 0x00, 0x2e, 0x4c, 0x6e, 0x61, 0x6d, 0x65, 0x38, 0x39, 0x00,
	0x2e, 0x4c, 0x6e, 0x61, 0x6d, 0x65, 0x39, 0x30, 0x00, 0x2e, 0x4c, 0x6e, 0x61, 0x6d, 0x65, 0x39, 0x31, 0x00, 0x2e,
	0x4c, 0x6e, 0x61, 0x6d, 0x65, 0x39, 0x32, 0x00, 0x2e, 0x4c, 0x6e, 0x61, 0x6d, 0x65, 0x39, 0x33, 0x00, 0x2e, 0x4c,
	0x6e, 0x61, 0x6d, 0x65, 0x39, 0x34, 0x00, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x00, 0x5f, 0x5f, 0x53, 0x50, 0x5f,
	0x48, 0x5f, 0x5f, 0x00, 0x5f, 0x5f, 0x53, 0x50, 0x5f, 0x4c, 0x5f, 0x5f, 0x00, 0x5f, 0x5f, 0x53, 0x52, 0x45, 0x47,
	0x5f, 0x5f, 0x00, 0x5f, 0x5f, 0x74, 0x6d, 0x70, 0x5f, 0x72, 0x65, 0x67, 0x5f, 0x5f, 0x00, 0x5f, 0x5f, 0x7a, 0x65,
	0x72, 0x6f, 0x5f, 0x72, 0x65, 0x67, 0x5f, 0x5f, 0x00, 0x2e, 0x4c, 0x32, 0x00, 0x5f, 0x65, 0x78, 0x69, 0x74, 0x2e,
	0x6f, 0x00, 0x2e, 0x4c, 0x6f, 0x63, 0x2e, 0x30, 0x00, 0x5f, 0x5f, 0x73, 0x74, 0x6f, 0x70, 0x5f, 0x70, 0x72, 0x6f,
	0x67, 0x72, 0x61, 0x6d, 0x00, 0x2e, 0x4c, 0x6f, 0x63, 0x2e, 0x31, 0x00, 0x4c, 0x30, 0x01, 0x00, 0x5f, 0x5f, 0x76,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x32, 0x32, 0x00, 0x5f, 0x5f, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x31,
	0x00, 0x5f, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x52, 0x45, 0x47, 0x49, 0x4f, 0x4e, 0x5f, 0x4c, 0x45, 0x4e, 0x47,
	0x54, 0x48, 0x5f, 0x5f, 0x00, 0x5f, 0x5f, 0x74, 0x72, 0x61, 0x6d, 0x70, 0x6f, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x5f,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x00, 0x5f, 0x65, 0x74, 0x65, 0x78, 0x74, 0x00, 0x5f, 0x5f, 0x76, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x5f, 0x32, 0x34, 0x00, 0x5f, 0x5f, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x31, 0x32, 0x00, 0x5f,
	0x5f, 0x62, 0x61, 0x64, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x72, 0x75, 0x70, 0x74, 0x00, 0x5f, 0x5f, 0x64, 0x61,
	0x74, 0x61, 0x5f, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x65, 0x6e, 0x64, 0x00, 0x5f, 0x5f, 0x76, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x5f, 0x36, 0x00, 0x5f, 0x5f, 0x74, 0x72, 0x61, 0x6d, 0x70, 0x6f, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x5f, 0x65,
	0x6e, 0x64, 0x00, 0x5f, 0x5f, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x33, 0x00, 0x5f, 0x5f, 0x76, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x5f, 0x32, 0x33, 0x00, 0x5f, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x6c, 0x6f, 0x61, 0x64, 0x5f,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x00, 0x5f, 0x5f, 0x64, 0x74, 0x6f, 0x72, 0x73, 0x5f, 0x65, 0x6e, 0x64, 0x00, 0x5f,
	0x5f, 0x4c, 0x4f, 0x43, 0x4b, 0x5f, 0x52, 0x45, 0x47, 0x49, 0x4f, 0x4e, 0x5f, 0x4c, 0x45, 0x4e, 0x47, 0x54, 0x48,
	0x5f, 0x5f, 0x00, 0x5f, 0x5f, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x32, 0x35, 0x00, 0x5f, 0x5f, 0x76, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x5f, 0x31, 0x31, 0x00, 0x5f, 0x5f, 0x69, 0x6e, 0x69, 0x74, 0x00, 0x5f, 0x5f, 0x76, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x5f, 0x31, 0x33, 0x00, 0x5f, 0x5f, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x31, 0x37,
	0x00, 0x5f, 0x5f, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x31, 0x39, 0x00, 0x5f, 0x5f, 0x76, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x5f, 0x37, 0x00, 0x5f, 0x5f, 0x65, 0x65, 0x70, 0x72, 0x6f, 0x6d, 0x5f, 0x65, 0x6e, 0x64, 0x00, 0x5f,
	0x5f, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x00, 0x5f, 0x5f, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x32,
	0x37, 0x00, 0x5f, 0x5f, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x00,
	0x5f, 0x5f, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x35, 0x00, 0x5f, 0x5f, 0x53, 0x49, 0x47, 0x4e, 0x41, 0x54,
	0x55, 0x52, 0x45, 0x5f, 0x52, 0x45, 0x47, 0x49, 0x4f, 0x4e, 0x5f, 0x4c, 0x45, 0x4e, 0x47, 0x54, 0x48, 0x5f, 0x5f,
	0x00, 0x5f, 0x5f, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x00, 0x6d, 0x61, 0x69, 0x6e,
	0x00, 0x5f, 0x5f, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x34, 0x00, 0x5f, 0x5f, 0x68, 0x65, 0x61, 0x70, 0x5f,
	0x65, 0x6e, 0x64, 0x00, 0x5f, 0x5f, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x39, 0x00, 0x5f, 0x5f, 0x76, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x5f, 0x32, 0x00, 0x5f, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x53, 0x49, 0x47, 0x4e, 0x41,
	0x54, 0x55, 0x52, 0x45, 0x5f, 0x52, 0x45, 0x47, 0x49, 0x4f, 0x4e, 0x5f, 0x4c, 0x45, 0x4e, 0x47, 0x54, 0x48, 0x5f,
	0x5f, 0x00, 0x5f, 0x5f, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x32, 0x31, 0x00, 0x5f, 0x5f, 0x76, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x5f, 0x31, 0x35, 0x00, 0x5f, 0x5f, 0x64, 0x74, 0x6f, 0x72, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x00, 0x5f, 0x5f, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x5f, 0x65, 0x6e, 0x64, 0x00, 0x5f, 0x5f, 0x73, 0x74, 0x61,
	0x63, 0x6b, 0x00, 0x5f, 0x65, 0x64, 0x61, 0x74, 0x61, 0x00, 0x5f, 0x5f, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f,
	0x38, 0x00, 0x5f, 0x5f, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x32, 0x36, 0x00, 0x5f, 0x5f, 0x45, 0x45, 0x50,
	0x52, 0x4f, 0x4d, 0x5f, 0x52, 0x45, 0x47, 0x49, 0x4f, 0x4e, 0x5f, 0x4c, 0x45, 0x4e, 0x47, 0x54, 0x48, 0x5f, 0x5f,
	0x00, 0x5f, 0x65, 0x78, 0x69, 0x74, 0x00, 0x5f, 0x5f, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x31, 0x34, 0x00,
	0x5f, 0x5f, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x31, 0x30, 0x00, 0x5f, 0x5f, 0x76, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x5f, 0x31, 0x36, 0x00, 0x5f, 0x5f, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x31, 0x38, 0x00, 0x5f, 0x5f,
	0x46, 0x55, 0x53, 0x45, 0x5f, 0x52, 0x45, 0x47, 0x49, 0x4f, 0x4e, 0x5f, 0x4c, 0x45, 0x4e, 0x47, 0x54, 0x48, 0x5f,
	0x5f, 0x00, 0x5f, 0x5f, 0x54, 0x45, 0x58, 0x54, 0x5f, 0x52, 0x45, 0x47, 0x49, 0x4f, 0x4e, 0x5f, 0x4c, 0x45, 0x4e,
	0x47, 0x54, 0x48, 0x5f, 0x5f, 0x00, 0x5f, 0x5f, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x32, 0x30, 0x00, 0x00,
	0x2e, 0x73, 0x79, 0x6d, 0x74, 0x61, 0x62, 0x00, 0x2e, 0x73, 0x74, 0x72, 0x74, 0x61, 0x62, 0x00, 0x2e, 0x73, 0x68,
	0x73, 0x74, 0x72, 0x74, 0x61, 0x62, 0x00, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x00, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x00, 0x2e, 0x74, 0x65, 0x78, 0x74, 0x00, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x00,
	0x2e, 0x6e, 0x6f, 0x74, 0x65, 0x2e, 0x67, 0x6e, 0x75, 0x2e, 0x61, 0x76, 0x72, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x69, 0x6e, 0x66, 0x6f, 0x00, 0x2e, 0x64, 0x65, 0x62, 0x75, 0x67, 0x5f, 0x61, 0x72, 0x61, 0x6e, 0x67, 0x65,
	0x73, 0x00, 0x2e, 0x64, 0x65, 0x62, 0x75, 0x67, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x00, 0x2e, 0x64, 0x65, 0x62, 0x75,
	0x67, 0x5f, 0x61, 0x62, 0x62, 0x72, 0x65, 0x76, 0x00, 0x2e, 0x64, 0x65, 0x62, 0x75, 0x67, 0x5f, 0x6c, 0x69, 0x6e,
	0x65, 0x00, 0x2e, 0x64, 0x65, 0x62, 0x75, 0x67, 0x5f, 0x73, 0x74, 0x72, 0x00, 0x2e, 0x64, 0x65, 0x62, 0x75, 0x67,
	0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x73, 0x74, 0x72, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1b, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
	0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x01, 0x80, 0x00, 0x0a, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x21, 0x00, 0x00, 0x00, 0x01,
	0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x01, 0x80, 0x00, 0x0a, 0x01, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2b, 0x00, 0x00,
	0x00, 0x01, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x74, 0x00, 0x00, 0x00, 0x96, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31,
	0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4a, 0x01, 0x00, 0x00,
	0x12, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
	0x00, 0x3a, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x5c, 0x01,
	0x00, 0x00, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x53, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x98, 0x01, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x62, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0xb8, 0x01, 0x00, 0x00, 0x96, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x6e, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x4e, 0x08, 0x00, 0x00, 0x2d, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7b, 0x0e, 0x00, 0x00, 0x6e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x88, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe9, 0x0e, 0x00, 0x00, 0x90, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x93, 0x00, 0x00, 0x00, 0x01, 0x00,
	0x00, 0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x79, 0x11, 0x00, 0x00, 0x53, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
	0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xcc, 0x11, 0x00, 0x00, 0x10, 0x0b, 0x00,
	0x00, 0x0d, 0x00, 0x00, 0x00, 0x79, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x09, 0x00,
	0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xdc, 0x1c, 0x00, 0x00, 0xb1,
	0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x11, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x8d, 0x23, 0x00,
	0x00, 0xa3, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00,
}
